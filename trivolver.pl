#! /usr/bin/perl

# TO-DO LIST:
# -make it do any odd-numbered k-nucleotide. length of matrix should be 4^k, 4 columns
# -ordered_trinucleotides can be ordered_knucleotides

# Perl script to simulate sequence evolution on a BIFURCATING TREE provided in Newick
#	format with a user-provided TRINUCLEOTIDE (64 x 4) rate matrix, such as that described
#	in SLiM. This allows non-reversible context-dependent evolution with back mutation.
# OUTPUTS: tree with node labels, accumulated mutations, and extant sequences.

#########################################################################################
# EXAMPLE CALL:
#########################################################################################
# trivolver.pl --tree=<treefile>.newick --seed_sequence=<sequence>.fasta --rate_matrix=<k x 4 table>.txt --branch_unit=<4N0 integer> --random_seed=<optional integer>
#########################################################################################

# Copyright (C) 2019 Chase W. Nelson
# DATE CREATED: June 2019
# AUTHOR: Chase W. Nelson
# CONTACT1: cnelson@amnh.org
# AFFILIATION: Institute for Comparative Genomics, American Museum of Natural History, 
#	New York, NY 10024, USA

# ACKNOWLEDGMENTS: written by C.W.N. with support from a Gerstner Scholars Fellowship from
# 	the Gerstner Family Foundation at the American Museum of Natural History, New York.

use strict;
use List::Util qw(max sum);
use Getopt::Long;

STDOUT->autoflush(1);

# Get the time
my $time1 = time;
my $local_time1 = localtime;

my @commands = @ARGV;

#########################################################################################
# INITIALIZE INPUT VARIABLES
my $tree; # file containing bifurcating evolutionary tree with branch lengths
my $seed_sequence; # file containing starting (seed) sequence at tree root, to be evolved
my $rate_matrix; # file containing 64 x 4 tab-delimited rate matrix in alphabetical order. First row values for: AAA>AAA\tAAA>ACA\tAAA>AGA\tAAA>ATA\n
my $branch_unit; # branch lengths will be multiplied by this value and rounded up to the nearest integer to determine number of generations
my $random_seed; # integer with which to seed the random number generator
my $tracked_motif;
my $track_rate;
my $verbose;

# Get user input, if given. If a Boolean argument is passed, its value is 1; else undef
GetOptions( "tree=s" => \$tree,
			"seed_sequence=s" => \$seed_sequence,
			"rate_matrix=s" => \$rate_matrix,
			"branch_unit=f" => \$branch_unit,
			"random_seed=i" => \$random_seed,
			"tracked_motif=s" => \$tracked_motif,
			"track_rate" => \$track_rate,
			"verbose" => \$verbose
			)
			
			or die "\n### WARNING: Error in command line arguments. Script terminated.\n\n";

unless(-f "$tree") {
	die "\n### WARNING: A valid --tree option must be provided: file containing bifurcating evolutionary tree with branch lengths. Only first tree used\n".
		"### trivolver terminated.\n\n";
}

unless(-f "$seed_sequence") {
	die "\n### WARNING: A valid --seed_sequence option must be provided: file containing starting (seed) sequence at tree root, to be evolved. Only first sequence used\n".
		"### trivolver terminated.\n\n";
}

unless(-f "$rate_matrix") {
	die "\n### WARNING: A valid --rate_matrix option must be provided: file containing 64 x 4 tab-delimited rate matrix in alphabetical order. First row values for: AAA>AAA\\tAAA>ACA\\tAAA>AGA\\tAAA>ATA\\n\n".
		"### trivolver terminated.\n\n";
}

unless($branch_unit =~ /\d/) {
	die "\n### WARNING: A valid --branch_unit option must be provided: branch lengths will be multiplied by this value and rounded up to the nearest integer to determine number of generations\n".
		"### trivolver terminated.\n\n";
}

print "################################################################################".
	"\n##                                                                            ##".
	"\n##               Evolution On Tree Using Custom Rates Initiated!              ##".
	"\n##                                                                            ##".
	"\n################################################################################\n";

print "\nAnalysis initiated at local time $local_time1\n";

print "\nCOMMAND: trivolver.pl @commands\n";

##########################################################################################
# Generate or assign random seed value
if($random_seed) {
	print "\nRANDOM SEED: $random_seed\n";
	srand($random_seed);
} else {
	$random_seed = srand(time ^ $$ ^ unpack "%32L*", `ps wwaxl | gzip`); # (Programming Perl, p. 955)
	print "\nRANDOM SEED: $random_seed\n";
}


##########################################################################################
# Extract file prefix
my $file_prefix;
if($tree =~/(.+)\..+/) { 
	$file_prefix = $1 . '_trivolver_results.tsv';
} else {
	$file_prefix = 'trivolver_results.tsv';
}


##########################################################################################
# Store the tree

# EXAMPLE: output from ms
#ms 1322 1 -T -G 1449.027 -eG 0.001589056 0.0 
#48735 14610 49045
#
#//
#(((((847:0.002850726,((580:0.000074233,894:0.000074233):0.002455480,(106:0.000840287,((538:0.000151096,1193:0.000151096):0.000552187,(((68:0.000141423,235:0.000141423):0.000306048,(419:0.000426335,1257:0.000426335):0.000021136):0.000154192,(722:0.000559850,(571:0.000512007,(893:0.000263856,(772:0.000243586,(695:0.000084251,769:0.000084251):0.000159335):0.000020270):0.000248150):0.000047843):0.000041813):0.000101620):0.000137004):0.001689426):0.000321013):0.004083729,(((650:0.000594102,(913:0.000453985,969:0.000453985):0.000140117):0.000599726,(190:0.000678085,255:0.000678085):0.000515742):0.003733546,((((513:0.000661413,(128:0.000526979,(135:0.000151900,320:0.000151900):0.000375079):0.000134434):0.000270983,(1303:0.000729321,(540:0.000575480,(681:0.000132216,(188:0.000014684,423:0.000014684):0.000117532):0.000443264):0.000153841):0.000203075):0.001456711,(((626:0.000459969,(607:0.000345876,(539:0.000151144,(369:0.000148560,940:0.000148560):0.000002584):0.000194732):0.000114093):0.000956210,(648:0.000500164,(125:0.000171550,141:0.000171550):0.000328614):0.000916015):0.000698676,((730:0.001246265,(1298:0.000349872,(1045:0.000333851,(216:0.000030301,624:0.000030301):0.000303550):0.000016022):0.000896392):0.000798229,(1064:0.001375590,(1:0.001219750,790:0.001219750):0.000155840):0.000668903):0.000070362):0.000274251):0.000959912,((237:0.001655212,((54:0.000917978,((1255:0.000378890,(551:0.000254615,964:0.000254615):0.000124275):0.000517957,(1189:0.000587866,(214:0.000451661,361:0.000451661):0.000136205):0.000308981):0.000021131):0.000688737,(221:0.001287557,(477:0.000305473,(565:0.000262947,763:0.000262947):0.000042526):0.000982084):0.000319157):0.000048498):0.001249580,((870:0.001209221,((42:0.000139136,(151:0.000115649,937:0.000115649):0.000023488):0.000968919,((784:0.000547901,1162:0.000547901):0.000471189,((1040:0.000440774,1163:0.000440774):0.000256395,(869:0.000532908,((659:0.000043024,915:0.000043024):0.000322777,(292:0.000201128,480:0.000201128):0.000164674):0.000167106):0.000164261):0.000321921):0.000088965):0.000101165):0.001389399,((613:0.001130107,((365:0.000473173,366:0.000473173):0.000577317,(474:0.000748891,809:0.000748891):0.000301599):0.000079617):0.000985075,((205:0.000998530,(559:0.000442278,1033:0.000442278):0.000556252):0.000965461,(((360:0.000669742,((683:0.000415819,1285:0.000415819):0.000133193,(924:0.000481300,((83:0.000027291,196:0.000027291):0.000232247,(146:0.000085086,998:0.000085086):0.000174452):0.000221763):0.000067712):0.000120730):0.000210490,((1031:0.000535661,(114:0.000510136,(234:0.000119823,416:0.000119823):0.000390313):0.000025524):0.000280682,(131:0.000763207,(302:0.000125237,(353:0.000124846,1004:0.000124846):0.000000391):0.000637970):0.000053136):0.000063889):0.000758338,((55:0.000039990,740:0.000039990):0.001399613,(((735:0.000214916,1117:0.000214916):0.000512747,(127:0.000697327,872:0.000697327):0.000030336):0.000659911,(1002:0.000842260,(720:0.000049202,922:0.000049202):0.000793058):0.000545313):0.000052030):0.000198968):0.000325420):0.000151192):0.000483437):0.000306173):0.000444226):0.001578355):0.002007083):0.007076698,(((1093:0.000118684,(403:0.000104899,1302:0.000104899):0.000013786):0.002753518,(874:0.002510807,(((701:0.000770168,(1211:0.000603542,(371:0.000505128,(622:0.000364788,(688:0.000060298,836:0.000060298):0.000304490):0.000140339):0.000098414):0.000166625):0.000450735,(484:0.001188351,(516:0.000683583,(43:0.000256188,(232:0.000050688,(811:0.000003361,1054:0.000003361):0.000047327):0.000205500):0.000427395):0.000504768):0.000032551):0.001280547,((1142:0.000833052,(399:0.000617480,984:0.000617480):0.000215572):0.000968148,(499:0.001170227,((664:0.000884758,(1086:0.000268037,((299:0.000187015,1267:0.000187015):0.000060176,(496:0.000245181,848:0.000245181):0.000002010):0.000020846):0.000616721):0.000218037,(775:0.001012701,868:0.001012701):0.000090093):0.000067432):0.000630973):0.000700249):0.000009358):0.000361395):0.005697172,((25:0.000388087,(1292:0.000222771,(291:0.000047898,649:0.000047898):0.000174873):0.000165317):0.005262719,((468:0.000710797,(1204:0.000294913,((304:0.000041033,504:0.000041033):0.000192208,(349:0.000227851,((52:0.000081217,867:0.000081217):0.000134994,(19:0.000215969,1181:0.000215969):0.000000241):0.000011640):0.000005390):0.000061672):0.000415884):0.000446065,((1063:0.000612070,((665:0.000300307,(39:0.000296724,(1126:0.000083312,(30:0.000006131,1175:0.000006131):0.000077181):0.000213411):0.000003584):0.000274908,(827:0.000336432,(273:0.000233350,(1318:0.000131472,(777:0.000043908,1089:0.000043908):0.000087564):0.000101878):0.000103082):0.000238784):0.000036854):0.000477117,(((212:0.000071126,928:0.000071126):0.000264904,(801:0.000204930,(173:0.000110495,1239:0.000110495):0.000094435):0.000131100):0.000596699,(595:0.000618465,1108:0.000618465):0.000314263):0.000156459):0.000067674):0.004493944):0.002918569):0.005441779):0.026022406,((687:0.001711160,((1222:0.000230580,((930:0.000058978,943:0.000058978):0.000105364,(976:0.000112847,(60:0.000080774,382:0.000080774):0.000032074):0.000051495):0.000066238):0.000770704,(876:0.000685753,(77:0.000578082,(599:0.000558913,(1197:0.000490175,(950:0.000481625,(903:0.000156292,1314:0.000156292):0.000325334):0.000008549):0.000068738):0.000019169):0.000107671):0.000315532):0.000709876):0.028543154,(((44:0.001775737,(1219:0.001631021,((((813:0.000241805,(997:0.000098934,1087:0.000098934):0.000142870):0.000146545,(130:0.000373423,317:0.000373423):0.000014926):0.000108403,(37:0.000409489,586:0.000409489):0.000087263):0.000989642,(((712:0.000509213,1279:0.000509213):0.000199656,(164:0.000691719,(183:0.000078741,347:0.000078741):0.000612978):0.000017150):0.000385971,((632:0.000069101,714:0.000069101):0.000732713,(546:0.000344172,931:0.000344172):0.000457642):0.000293026):0.000391554):0.000144628):0.000144716):0.001670062,(((805:0.000652736,1321:0.000652736):0.000138199,(338:0.000742175,(454:0.000553825,(206:0.000409238,(738:0.000314052,(264:0.000220824,879:0.000220824):0.000093228):0.000095186):0.000144587):0.000188350):0.000048759):0.001831826,((289:0.001104519,(654:0.000146784,1240:0.000146784):0.000957734):0.000503564,((225:0.000248598,682:0.000248598):0.001327074,((621:0.000030516,1259:0.000030516):0.001033067,(177:0.000579903,(201:0.000021238,597:0.000021238):0.000558666):0.000483679):0.000512089):0.000032411):0.001014677):0.000823040):0.003399109,((((21:0.000754548,(86:0.000147074,(837:0.000134239,(566:0.000087167,(169:0.000032339,(1143:0.000026428,1151:0.000026428):0.000005912):0.000054828):0.000047072):0.000012835):0.000607474):0.001580304,((611:0.000198749,(817:0.000173875,(418:0.000004677,1161:0.000004677):0.000169198):0.000024874):0.001259823,((75:0.000465863,(350:0.000214558,691:0.000214558):0.000251304):0.000160408,((1155:0.000078384,(136:0.000051109,933:0.000051109):0.000027275):0.000536630,(376:0.000497842,(211:0.000079632,508:0.000079632):0.000418210):0.000117172):0.000011257):0.000832301):0.000876280):0.001250257,((((422:0.000622242,(256:0.000197097,(155:0.000160130,1206:0.000160130):0.000036967):0.000425145):0.000816529,((197:0.000198483,1017:0.000198483):0.000875485,(602:0.000753796,(464:0.000176885,(297:0.000142149,358:0.000142149):0.000034736):0.000576911):0.000320173):0.000364802):0.000431165,((24:0.000097494,1291:0.000097494):0.001409378,(((119:0.000468879,316:0.000468879):0.000276299,(375:0.000624531,(830:0.000581835,((1035:0.000190021,1107:0.000190021):0.000255818,(507:0.000402107,(261:0.000283184,1218:0.000283184):0.000118924):0.000043732):0.000135996):0.000042697):0.000120647):0.000442525,((270:0.000489651,(1058:0.000485534,(156:0.000352717,1217:0.000352717):0.000132817):0.000004117):0.000488532,(774:0.000786111,(633:0.000324196,(525:0.000009035,1182:0.000009035):0.000315161):0.000461915):0.000192072):0.000209520):0.000319168):0.000363064):0.001523813,((986:0.001533539,((((530:0.000215910,1115:0.000215910):0.000147178,(759:0.000294438,1047:0.000294438):0.000068649):0.000359567,(1003:0.000430023,(822:0.000374955,1220:0.000374955):0.000055068):0.000292632):0.000484356,((992:0.000308503,(469:0.000241178,(1316:0.000209779,(899:0.000188661,1203:0.000188661):0.000021118):0.000031399):0.000067325):0.000874052,((898:0.000475687,(787:0.000006917,1272:0.000006917):0.000468770):0.000636283,((941:0.000887445,((322:0.000387771,(252:0.000024418,547:0.000024418):0.000363353):0.000388994,(1056:0.000453697,(552:0.000252154,725:0.000252154):0.000201543):0.000323068):0.000110679):0.000193575,(1266:0.000941708,(1273:0.000740411,((999:0.000377287,(470:0.000273289,1081:0.000273289):0.000103998):0.000324836,(145:0.000456204,((354:0.000005292,433:0.000005292):0.000104061,(307:0.000042755,421:0.000042755):0.000066598):0.000346851):0.000245919):0.000038288):0.000201297):0.000139311):0.000030951):0.000070585):0.000024456):0.000326528):0.000509990,(((1245:0.000304098,1263:0.000304098):0.000625558,(542:0.000887796,(917:0.000336558,(846:0.000268340,1062:0.000268340):0.000068217):0.000551239):0.000041860):0.000978327,(((973:0.000567247,(439:0.000471144,1080:0.000471144):0.000096103):0.000342811,(1128:0.000610745,(103:0.000524213,(450:0.000090510,1111:0.000090510):0.000433703):0.000086532):0.000299313):0.000361180,((10:0.000222753,311:0.000222753):0.000924187,((318:0.000591783,(276:0.000572674,(6:0.000311158,351:0.000311158):0.000261516):0.000019109):0.000120259,(121:0.000711327,(379:0.000658024,((684:0.000061135,(29:0.000006628,(771:0.000004697,850:0.000004697):0.000001931):0.000054507):0.000220274,(265:0.000152589,374:0.000152589):0.000128820):0.000376615):0.000053304):0.000000715):0.000434897):0.000124298):0.000636746):0.000135546):0.001350220):0.000191360):0.001102318,(((1071:0.001117436,(246:0.000722574,((406:0.000099302,936:0.000099302):0.000341535,(497:0.000418355,(1159:0.000336668,(72:0.000136971,954:0.000136971):0.000199697):0.000081687):0.000022482):0.000281738):0.000394862):0.000177340,((1196:0.000880362,(267:0.000184752,1212:0.000184752):0.000695610):0.000348086,(696:0.001157106,((1037:0.000349014,1284:0.000349014):0.000116198,(669:0.000354232,1223:0.000354232):0.000110980):0.000691894):0.000071343):0.000066327):0.003386898,((((66:0.000906340,(891:0.000228702,1135:0.000228702):0.000677638):0.000302403,(1150:0.001141998,((209:0.000397392,1101:0.000397392):0.000309116,(111:0.000555896,531:0.000555896):0.000150611):0.000435491):0.000066745):0.001167138,((78:0.000539465,818:0.000539465):0.001096257,((974:0.000510639,1013:0.000510639):0.000453540,(1001:0.000625412,1260:0.000625412):0.000338766):0.000671544):0.000740159):0.000058836,(((652:0.000493436,(1000:0.000468569,(1122:0.000272944,1243:0.000272944):0.000195625):0.000024866):0.000347501,((1138:0.000433596,(33:0.000144597,529:0.000144597):0.000288999):0.000143355,(56:0.000453487,179:0.000453487):0.000123464):0.000263986):0.001542660,(((((134:0.000869980,(751:0.000659983,((254:0.000567493,677:0.000567493):0.000074248,((1305:0.000354875,(745:0.000328360,(692:0.000120130,1044:0.000120130):0.000208230):0.000026515):0.000258265,(282:0.000534801,680:0.000534801):0.000078339):0.000028601):0.000018241):0.000209997):0.000178628,((1016:0.000572341,(85:0.000088336,972:0.000088336):0.000484005):0.000442028,((59:0.000254228,104:0.000254228):0.000656483,(569:0.000569565,(22:0.000531611,(509:0.000249733,(466:0.000007216,963:0.000007216):0.000242517):0.000281878):0.000037954):0.000341146):0.000103658):0.000034239):0.000405933,(166:0.001253969,(323:0.000979585,(348:0.000935655,816:0.000935655):0.000043930):0.000274384):0.000200572):0.000017980,((1275:0.000560515,(532:0.000155691,1104:0.000155691):0.000404824):0.000907962,((1030:0.001048046,(840:0.000991382,1304:0.000991382):0.000056664):0.000164749,(((614:0.000179357,1139:0.000179357):0.000709834,(1085:0.000468340,(199:0.000220785,(588:0.000156120,1100:0.000156120):0.000064665):0.000247555):0.000420852):0.000280115,(452:0.000998084,((886:0.000352805,(76:0.000093184,245:0.000093184):0.000259622):0.000258027,(314:0.000379943,(625:0.000038476,(606:0.000017383,1076:0.000017383):0.000021092):0.000341467):0.000230890):0.000387252):0.000171222):0.000043489):0.000255681):0.000004044):0.000723145,((247:0.000318090,451:0.000318090):0.001614348,(((1018:0.000472514,(57:0.000329683,990:0.000329683):0.000142831):0.000870819,(1306:0.001325199,(1146:0.001277563,1278:0.001277563):0.000047636):0.000018133):0.000515448,((((170:0.000320512,262:0.000320512):0.000820407,(767:0.000459813,(94:0.000104373,96:0.000104373):0.000355440):0.000681107):0.000229903,(471:0.001237696,((192:0.000356190,1061:0.000356190):0.000832870,(1029:0.001069286,(((217:0.000160659,882:0.000160659):0.000293544,(564:0.000308508,(1308:0.000306428,(472:0.000205974,721:0.000205974):0.000100454):0.000002080):0.000145695):0.000487727,(1048:0.000867138,(357:0.000320830,(594:0.000313704,663:0.000313704):0.000007125):0.000546308):0.000074793):0.000127355):0.000119775):0.000048635):0.000133126):0.000257006,(((782:0.000171058,(8:0.000157164,1050:0.000157164):0.000013893):0.000419702,(340:0.000311863,(305:0.000134633,708:0.000134633):0.000177230):0.000278897):0.000802631,((952:0.000054491,1078:0.000054491):0.001206803,(1187:0.000570321,(460:0.000487192,584:0.000487192):0.000083129):0.000690974):0.000132097):0.000234437):0.000230952):0.000073658):0.000263228):0.000187930):0.000051121):0.002246956):0.000005753):0.002157481):0.023409406):0.009779247):0.091693148,((((((274:0.000232026,389:0.000232026):0.000841232,((430:0.000280998,641:0.000280998):0.000776821,(112:0.000500135,(32:0.000241504,1129:0.000241504):0.000258631):0.000557684):0.000015439):0.000671561,((((41:0.000087119,392:0.000087119):0.000561642,(429:0.000521412,((1215:0.000270085,1269:0.000270085):0.000225472,((524:0.000111744,(623:0.000108973,752:0.000108973):0.000002771):0.000379979,(63:0.000445123,(1130:0.000110551,(581:0.000102846,689:0.000102846):0.000007705):0.000334572):0.000046599):0.000003834):0.000025855):0.000127348):0.000746809,((301:0.000453024,(779:0.000258514,890:0.000258514):0.000194510):0.000598931,((548:0.000254816,756:0.000254816):0.000564216,((181:0.000049419,662:0.000049419):0.000467926,((240:0.000000849,685:0.000000849):0.000267821,(306:0.000052519,534:0.000052519):0.000216151):0.000248675):0.000301687):0.000232923):0.000343615):0.000201135,((409:0.001449067,((562:0.001094468,(1153:0.000549380,(193:0.000097274,330:0.000097274):0.000452106):0.000545088):0.000126301,((858:0.000411388,(70:0.000040382,856:0.000040382):0.000371006):0.000747945,(601:0.000705875,815:0.000705875):0.000453459):0.000061436):0.000228298):0.000020078,((646:0.000588386,(108:0.000412929,458:0.000412929):0.000175457):0.000875808,(((483:0.000497933,(12:0.000330041,705:0.000330041):0.000167892):0.000692152,((475:0.000464350,855:0.000464350):0.000624021,((845:0.000071768,906:0.000071768):0.000754603,(1073:0.000753318,(465:0.000193170,(168:0.000168488,1019:0.000168488):0.000024682):0.000560149):0.000073053):0.000262000):0.000101714):0.000256563,(((1114:0.000734736,((1095:0.000060073,1283:0.000060073):0.000470353,(887:0.000277483,(693:0.000091696,798:0.000091696):0.000185787):0.000252942):0.000204311):0.000120261,((521:0.000422981,(271:0.000304791,637:0.000304791):0.000118190):0.000431142,(79:0.000721312,(53:0.000167189,362:0.000167189):0.000554123):0.000132811):0.000000874):0.000497949,((1022:0.000411356,(161:0.000289217,437:0.000289217):0.000122138):0.000585119,(295:0.000908503,(1077:0.000233978,(333:0.000218488,1271:0.000218488):0.000015491):0.000674525):0.000087972):0.000356471):0.000093702):0.000017547):0.000004951):0.000127559):0.000148115):0.002557647,(((81:0.000565055,765:0.000565055):0.000799039,(926:0.000705910,1171:0.000705910):0.000658183):0.001292621,(((993:0.000356470,(457:0.000269711,605:0.000269711):0.000086759):0.001045500,(((251:0.000124261,908:0.000124261):0.000542299,(191:0.000623892,755:0.000623892):0.000042668):0.000236033,(1082:0.000849974,((7:0.000136403,883:0.000136403):0.000021616,(833:0.000138651,897:0.000138651):0.000019368):0.000691955):0.000052618):0.000499378):0.000158371,((((702:0.000032370,967:0.000032370):0.000465082,(481:0.000322210,(228:0.000145791,428:0.000145791):0.000176419):0.000175242):0.000410506,((310:0.000690513,(490:0.000090474,(157:0.000014243,574:0.000014243):0.000076231):0.000600040):0.000201360,(1026:0.000790483,(778:0.000737155,(1241:0.000701983,((308:0.000445202,861:0.000445202):0.000174621,(1228:0.000491607,((390:0.000148026,1230:0.000148026):0.000305758,(364:0.000377069,(90:0.000129265,1065:0.000129265):0.000247804):0.000076715):0.000037823):0.000128216):0.000082160):0.000035172):0.000053327):0.000101391):0.000016085):0.000548707,((717:0.000051875,1307:0.000051875):0.001307072,(102:0.000659660,(315:0.000270626,345:0.000270626):0.000389034):0.000699288):0.000097718):0.000103676):0.001096374):0.001645752):0.010784367,((((113:0.000701385,(1234:0.000686609,((919:0.000145977,(443:0.000047797,743:0.000047797):0.000098180):0.000384949,((655:0.000159059,1106:0.000159059):0.000339452,(463:0.000283098,(910:0.000175205,1254:0.000175205):0.000107893):0.000215413):0.000032415):0.000155683):0.000014776):0.001581644,(1319:0.001809885,((715:0.000474009,(533:0.000046351,1005:0.000046351):0.000427659):0.001217936,((441:0.000829005,(572:0.000373809,((165:0.000238365,(591:0.000150938,(1296:0.000067121,(20:0.000002549,944:0.000002549):0.000064572):0.000083818):0.000087427):0.000060071,(806:0.000279516,1010:0.000279516):0.000018920):0.000075373):0.000455196):0.000715089,(1144:0.001474861,(658:0.000918258,(95:0.000844410,447:0.000844410):0.000073848):0.000556603):0.000069234):0.000147851):0.000117940):0.000473144):0.005290329,(((((545:0.000329318,(36:0.000027633,1053:0.000027633):0.000301686):0.000653052,(3:0.000544267,527:0.000544267):0.000438104):0.000850897,(23:0.001355385,(((812:0.000350468,(600:0.000207030,(1183:0.000064391,(290:0.000003480,746:0.000003480):0.000060910):0.000142639):0.000143438):0.000151613,((1213:0.000107746,(142:0.000089318,415:0.000089318):0.000018429):0.000388186,(18:0.000165644,703:0.000165644):0.000330288):0.000006149):0.000564054,(4:0.000733964,((1124:0.000574252,(825:0.000568263,((162:0.000142163,(50:0.000029564,1116:0.000029564):0.000112600):0.000352142,((99:0.000090196,781:0.000090196):0.000225094,(242:0.000246545,(367:0.000204425,642:0.000204425):0.000042120):0.000068745):0.000179016):0.000073957):0.000005990):0.000082175,(459:0.000596578,(105:0.000240344,1152:0.000240344):0.000356234):0.000059849):0.000077537):0.000332170):0.000289250):0.000477883):0.000320117,((((272:0.000036731,706:0.000036731):0.000405479,(334:0.000082868,1121:0.000082868):0.000359342):0.000689080,((598:0.000089305,776:0.000089305):0.000904061,((352:0.000229890,935:0.000229890):0.000151065,(671:0.000346002,(88:0.000265833,175:0.000265833):0.000080168):0.000034953):0.000612411):0.000137924):0.000927533,(((485:0.000096197,676:0.000096197):0.000844659,((27:0.000141187,479:0.000141187):0.000194614,(294:0.000310566,486:0.000310566):0.000025235):0.000605055):0.000600111,(((489:0.000005278,1256:0.000005278):0.000717662,(((253:0.000213698,865:0.000213698):0.000294373,(661:0.000320173,939:0.000320173):0.000187898):0.000200553,(174:0.000600110,(616:0.000564519,(28:0.000071905,770:0.000071905):0.000492614):0.000035590):0.000108514):0.000014317):0.000543873,((159:0.000366917,1289:0.000366917):0.000726666,((236:0.000149869,506:0.000149869):0.000413207,(380:0.000455691,(342:0.000124526,1147:0.000124526):0.000331165):0.000107384):0.000530507):0.000173231):0.000274154):0.000517856):0.000094561):0.004947315,(((541:0.000211426,(407:0.000129623,1046:0.000129623):0.000081803):0.000768241,(647:0.000455054,761:0.000455054):0.000524613):0.003992303,((978:0.000876325,(716:0.000276226,(402:0.000251804,953:0.000251804):0.000024422):0.000600099):0.000920875,(((1012:0.000234889,(359:0.000121550,807:0.000121550):0.000113340):0.000241638,(391:0.000356156,1248:0.000356156):0.000120371):0.000448631,((51:0.000156481,(741:0.000045648,1250:0.000045648):0.000110833):0.000553369,((921:0.000089841,1132:0.000089841):0.000583891,(363:0.000518505,1109:0.000518505):0.000155227):0.000036119):0.000215308):0.000872042):0.003174771):0.002128729):0.000472659):0.002984498,(((((71:0.000950396,(144:0.000346666,(678:0.000188954,1167:0.000188954):0.000157713):0.000603730):0.000635276,((764:0.000719659,(298:0.000468650,(268:0.000336831,849:0.000336831):0.000131819):0.000251010):0.000745036,(427:0.001135268,(62:0.000010789,1274:0.000010789):0.001124479):0.000329427):0.000120977):0.001058950,(((802:0.000646294,(544:0.000226865,732:0.000226865):0.000419429):0.000267141,(1105:0.000725171,((230:0.000004194,949:0.000004194):0.000208959,(737:0.000152952,948:0.000152952):0.000060201):0.000512017):0.000188264):0.001553416,((749:0.000995354,762:0.000995354):0.000722021,(126:0.001083373,((726:0.000389514,1299:0.000389514):0.000550890,(107:0.000566350,(222:0.000473456,(803:0.000178486,1052:0.000178486):0.000294971):0.000092893):0.000374054):0.000142969):0.000634002):0.000749476):0.000177771):0.000923910,(((((309:0.000504789,(514:0.000116801,(287:0.000113423,(1027:0.000067454,(515:0.000066283,1205:0.000066283):0.000001171):0.000045969):0.000003377):0.000387989):0.000700746,((1244:0.000236890,1315:0.000236890):0.000621977,(916:0.000258812,1066:0.000258812):0.000600054):0.000346669):0.000627515,((666:0.000962297,(1231:0.000657587,(729:0.000603321,(120:0.000577126,(1120:0.000549824,(1261:0.000184124,1311:0.000184124):0.000365700):0.000027302):0.000026195):0.000054266):0.000304710):0.000476608,(((((554:0.000230040,(98:0.000091211,618:0.000091211):0.000138829):0.000183062,(979:0.000374407,(832:0.000291572,1209:0.000291572):0.000082836):0.000038695):0.000243340,(244:0.000651244,((1247:0.000320230,(694:0.000232473,(74:0.000099894,1119:0.000099894):0.000132579):0.000087757):0.000278584,(((335:0.000055906,875:0.000055906):0.000158550,(69:0.000175197,(35:0.000005850,233:0.000005850):0.000169347):0.000039259):0.000228000,(651:0.000301684,1251:0.000301684):0.000140772):0.000156357):0.000052431):0.000005198):0.000349773,(620:0.000782024,(185:0.000641283,(895:0.000579536,(523:0.000275836,905:0.000275836):0.000303700):0.000061747):0.000140741):0.000224192):0.000094928,(461:0.001047890,(218:0.000175573,1113:0.000175573):0.000872317):0.000053254):0.000337761):0.000394146):0.000892483,((((988:0.000475325,(553:0.000347564,866:0.000347564):0.000127760):0.000158498,(535:0.000578140,(110:0.000385972,154:0.000385972):0.000192167):0.000055683):0.000681330,((82:0.000260216,(263:0.000104284,971:0.000104284):0.000155932):0.000942705,((773:0.000420894,(100:0.000053131,1246:0.000053131):0.000367763):0.000062162,((788:0.000122596,1199:0.000122596):0.000314813,(896:0.000176148,(719:0.000029914,1169:0.000029914):0.000146233):0.000261262):0.000045647):0.000719865):0.000112231):0.001350757,(((1014:0.001109635,((109:0.000285955,(494:0.000157002,892:0.000157002):0.000128953):0.000819342,(1024:0.001059671,(49:0.000706360,947:0.000706360):0.000353311):0.000045626):0.000004339):0.000503842,((((487:0.000465903,((414:0.000184330,(455:0.000108918,1133:0.000108918):0.000075412):0.000192661,(269:0.000236229,981:0.000236229):0.000140761):0.000088913):0.000619513,(372:0.001067254,((286:0.000576078,445:0.000576078):0.000194965,(171:0.000624765,(178:0.000520772,1137:0.000520772):0.000103993):0.000146278):0.000296211):0.000018162):0.000312068,(((26:0.000314575,(189:0.000044065,942:0.000044065):0.000270510):0.000480764,(1070:0.000412886,((303:0.000054266,1177:0.000054266):0.000224311,(163:0.000054489,498:0.000054489):0.000224088):0.000134308):0.000382453):0.000500844,(48:0.001008242,(960:0.000035326,1156:0.000035326):0.000972917):0.000287941):0.000101300):0.000188583,((89:0.000500347,((786:0.000102835,797:0.000102835):0.000274368,(370:0.000337254,670:0.000337254):0.000039949):0.000123144):0.001035502,((118:0.000863525,229:0.000863525):0.000641461,(((476:0.000167662,1270:0.000167662):0.000106907,((132:0.000072864,1148:0.000072864):0.000148018,(733:0.000190795,(46:0.000073850,982:0.000073850):0.000116945):0.000030087):0.000053688):0.001210460,((5:0.000577163,(431:0.000494502,885:0.000494502):0.000082661):0.000398582,(210:0.000963428,1059:0.000963428):0.000012317):0.000509285):0.000019955):0.000030863):0.000050218):0.000027410):0.000586496,((1317:0.001175528,(791:0.000944124,(731:0.000499656,(881:0.000238070,(1011:0.000076355,1099:0.000076355):0.000161716):0.000261586):0.000444468):0.000231404):0.000514244,((841:0.000281391,(699:0.000158403,877:0.000158403):0.000122988):0.001305726,(((167:0.000798125,(148:0.000788126,(636:0.000212048,(1188:0.000164792,(115:0.000045567,854:0.000045567):0.000119225):0.000047256):0.000576078):0.000009999):0.000278218,(((558:0.000373378,(1214:0.000108777,1280:0.000108777):0.000264602):0.000180472,((1237:0.000073112,1294:0.000073112):0.000420235,(195:0.000104145,968:0.000104145):0.000389202):0.000060503):0.000263349,((1295:0.000306424,(918:0.000127184,938:0.000127184):0.000179240):0.000491585,(383:0.000660462,1170:0.000660462):0.000137547):0.000019190):0.000259144):0.000397373,(718:0.001083957,((332:0.000236784,1049:0.000236784):0.000527547,(220:0.000577882,346:0.000577882):0.000186450):0.000319626):0.000389758):0.000113402):0.000102655):0.000510201):0.000465936):0.000059624):0.000371562,((45:0.002077147,(1079:0.001196457,(734:0.001053075,(116:0.000260495,(249:0.000259937,1134:0.000259937):0.000000558):0.000792581):0.000143381):0.000880691):0.000698694,((1176:0.000892619,(404:0.000205759,800:0.000205759):0.000686860):0.001588643,(((604:0.000157165,796:0.000157165):0.000717971,(184:0.000813251,(644:0.000146648,1055:0.000146648):0.000666603):0.000061886):0.001381781,((1262:0.000444408,((258:0.000117456,697:0.000117456):0.000122128,(149:0.000170817,640:0.000170817):0.000068767):0.000204824):0.001640124,(((1158:0.000471173,(511:0.000420702,1235:0.000420702):0.000050471):0.000918698,(945:0.001129910,(434:0.000411201,(172:0.000288250,(1141:0.000250159,(500:0.000003919,1293:0.000003919):0.000246240):0.000038091):0.000122951):0.000718709):0.000259960):0.000529550,((((153:0.000200200,860:0.000200200):0.000465800,(47:0.000630960,(444:0.000043912,462:0.000043912):0.000587048):0.000035039):0.000325341,(204:0.000880459,1140:0.000880459):0.000110882):0.000650492,(((449:0.000348866,(667:0.000338677,863:0.000338677):0.000010189):0.000349924,(93:0.000365649,563:0.000365649):0.000333141):0.000905585,(224:0.001206086,(753:0.000002132,946:0.000002132):0.001203955):0.000398288):0.000037459):0.000277588):0.000165110):0.000172386):0.000224345):0.000294579):0.000321254):0.000471437):0.004843139,(((129:0.000496699,(656:0.000383409,(587:0.000198260,794:0.000198260):0.000185149):0.000113291):0.002477721,((537:0.000900876,668:0.000900876):0.001857789,((448:0.001537043,(139:0.001285893,(925:0.000312747,(970:0.000287233,1281:0.000287233):0.000025514):0.000973146):0.000251151):0.001002853,(((160:0.000232187,(61:0.000170000,(31:0.000133111,1103:0.000133111):0.000036889):0.000062187):0.001063859,(549:0.000937657,1233:0.000937657):0.000358389):0.000846703,((758:0.001028267,(1276:0.000727598,((596:0.000502188,(955:0.000467637,(202:0.000279746,675:0.000279746):0.000187891):0.000034551):0.000134695,(852:0.000632707,901:0.000632707):0.000004176):0.000090715):0.000300669):0.000908723,((555:0.000414225,864:0.000414225):0.000697611,(660:0.000985106,1179:0.000985106):0.000126730):0.000825153):0.000205759):0.000397148):0.000218767):0.000215756):0.001975636,((((843:0.000472426,(904:0.000372035,1145:0.000372035):0.000100390):0.000922888,(645:0.000874733,((744:0.000193640,1173:0.000193640):0.000262131,(373:0.000453806,(385:0.000094808,478:0.000094808):0.000358998):0.000001965):0.000418962):0.000520580):0.001794049,(387:0.002338298,(491:0.001208479,851:0.001208479):0.001129819):0.000851065):0.000911813,(((278:0.000318165,401:0.000318165):0.000999447,((((1067:0.000137123,1136:0.000137123):0.000164145,(34:0.000147102,275:0.000147102):0.000154166):0.000306583,(80:0.000324883,492:0.000324883):0.000282968):0.000648619,((857:0.000317570,1023:0.000317570):0.000938702,(578:0.000681019,(1160:0.000214343,(561:0.000070787,1221:0.000070787):0.000143556):0.000466675):0.000575253):0.000000199):0.000061142):0.002049484,(823:0.003092783,((1112:0.000730077,(213:0.000238461,934:0.000238461):0.000491615):0.001276637,(((657:0.000273439,(977:0.000156692,(312:0.000119406,(194:0.000060406,411:0.000060406):0.000059000):0.000037286):0.000116747):0.000952685,((628:0.000714752,(983:0.000458851,(556:0.000251947,573:0.000251947):0.000206904):0.000255901):0.000382234,(((341:0.000436657,(519:0.000379686,(239:0.000302303,824:0.000302303):0.000077383):0.000056972):0.000405057,((64:0.000021354,1200:0.000021354):0.000747414,(1184:0.000613227,(839:0.000121920,1008:0.000121920):0.000491307):0.000155541):0.000072946):0.000206386,((690:0.000045643,880:0.000045643):0.000961370,((557:0.000242173,610:0.000242173):0.000695114,(339:0.000916729,(396:0.000232632,728:0.000232632):0.000684096):0.000020558):0.000069726):0.000041086):0.000048887):0.000129138):0.000557607,((123:0.000735186,(101:0.000614394,1149:0.000614394):0.000120792):0.001025659,(((87:0.000493685,1060:0.000493685):0.000960250,((293:0.000388235,(384:0.000366295,(1300:0.000291841,(829:0.000281758,1232:0.000281758):0.000010084):0.000074454):0.000021940):0.000474771,(200:0.000734121,1207:0.000734121):0.000128885):0.000590929):0.000064803,(((446:0.000360214,995:0.000360214):0.000199814,(1229:0.000505020,(84:0.000398585,(393:0.000253041,724:0.000253041):0.000145543):0.000106435):0.000055008):0.000957867,(1096:0.001352120,1201:0.001352120):0.000165775):0.000000843):0.000242108):0.000022886):0.000222982):0.001086070):0.000274313):0.000734080):0.000848881):0.003461615):0.002146184):0.004528977):0.086254179,((((592:0.001151802,1282:0.001151802):0.000329296,(((257:0.000145885,727:0.000145885):0.000878418,(522:0.000748557,(147:0.000156578,1277:0.000156578):0.000591979):0.000275745):0.000203879,(215:0.001171052,(1224:0.000892125,(442:0.000236932,1227:0.000236932):0.000655193):0.000278926):0.000057129):0.000252917):0.013277726,((((1090:0.001021684,(((186:0.000489402,834:0.000489402):0.000134678,(653:0.000602018,(495:0.000458513,(754:0.000265374,1038:0.000265374):0.000193139):0.000143505):0.000022061):0.000241932,((575:0.000411091,1202:0.000411091):0.000366507,(1091:0.000444345,(518:0.000441110,819:0.000441110):0.000003235):0.000333253):0.000088414):0.000155673):0.000756369,(((603:0.000416284,(615:0.000174245,1041:0.000174245):0.000242039):0.000788734,(331:0.001142274,(386:0.000415645,456:0.000415645):0.000726630):0.000062744):0.000447210,((279:0.000652188,(92:0.000579713,(1072:0.000098302,(368:0.000068047,631:0.000068047):0.000030255):0.000481411):0.000072475):0.000824112,(709:0.000783157,739:0.000783157):0.000693143):0.000175928):0.000125825):0.002223164,((((889:0.000465889,(284:0.000213148,1172:0.000213148):0.000252741):0.000492493,(1192:0.000953811,((679:0.000273958,(560:0.000008768,909:0.000008768):0.000265191):0.000560248,(783:0.000398106,(300:0.000017312,1265:0.000017312):0.000380793):0.000436101):0.000119605):0.000004571):0.000763522,(1174:0.001550291,((438:0.000161629,842:0.000161629):0.001269935,(((180:0.000232491,285:0.000232491):0.000457891,(760:0.000349039,(608:0.000096292,612:0.000096292):0.000252747):0.000341342):0.000096313,(((619:0.000092463,1252:0.000092463):0.000586996,(381:0.000428949,810:0.000428949):0.000250510):0.000102149,((1110:0.000222178,(785:0.000040935,957:0.000040935):0.000181243):0.000498678,((426:0.000291779,907:0.000291779):0.000399953,((227:0.000364075,344:0.000364075):0.000119740,(324:0.000469408,1168:0.000469408):0.000014407):0.000207916):0.000029124):0.000060752):0.000005086):0.000644870):0.000118727):0.000171613):0.001035196,((158:0.000193038,1092:0.000193038):0.001580702,((1007:0.000747841,1118:0.000747841):0.000781802,((321:0.001403493,(67:0.000426139,319:0.000426139):0.000977353):0.000025802,(1216:0.001414206,((424:0.000291703,912:0.000291703):0.000914037,((888:0.000971939,(609:0.000072350,792:0.000072350):0.000899589):0.000168976,((325:0.000493408,808:0.000493408):0.000617657,(951:0.000645199,(((259:0.000103616,(238:0.000062475,328:0.000062475):0.000041141):0.000173911,(844:0.000146743,1313:0.000146743):0.000130784):0.000190692,(1036:0.000340356,1157:0.000340356):0.000127864):0.000176979):0.000465866):0.000029850):0.000064826):0.000208466):0.000015089):0.000100348):0.000244097):0.000983360):0.001244117):0.000420747,(((248:0.000571213,520:0.000571213):0.000641105,(((420:0.000225064,(672:0.000166465,(643:0.000047164,742:0.000047164):0.000119301):0.000058599):0.000201889,(1098:0.000312416,(748:0.000139263,(394:0.000112536,1083:0.000112536):0.000026727):0.000173153):0.000114537):0.000500562,(576:0.000792552,(356:0.000769594,((432:0.000498302,577:0.000498302):0.000111762,((260:0.000180580,991:0.000180580):0.000357098,(343:0.000416453,961:0.000416453):0.000121225):0.000072385):0.000159530):0.000022959):0.000134963):0.000284802):0.002954630,((208:0.001439100,570:0.001439100):0.001228095,((138:0.000910538,(630:0.000701080,(835:0.000424194,((38:0.000062220,1208:0.000062220):0.000149872,(377:0.000197925,(1088:0.000170861,(410:0.000100114,453:0.000100114):0.000070747):0.000027064):0.000014167):0.000212103):0.000276886):0.000209458):0.001373494,((989:0.001294958,(929:0.001102399,(1322:0.000367727,(873:0.000131318,(65:0.000067691,117:0.000067691):0.000063627):0.000236409):0.000734672):0.000192559):0.000541857,((1264:0.000231024,(16:0.000078214,673:0.000078214):0.000152810):0.001085596,(1127:0.001039317,(((2:0.000211087,932:0.000211087):0.000258608,(828:0.000285068,(398:0.000092679,820:0.000092679):0.000192389):0.000184627):0.000274583,(567:0.000567438,838:0.000567438):0.000176839):0.000295040):0.000277302):0.000520195):0.000447217):0.000383163):0.001499752):0.000255018):0.010336861):0.011802746,((789:0.005370060,((425:0.000905038,((137:0.000364303,(502:0.000186092,1309:0.000186092):0.000178211):0.000238302,(152:0.000548874,436:0.000548874):0.000053731):0.000302433):0.001263865,((826:0.000670746,(124:0.000290810,(58:0.000097106,467:0.000097106):0.000193704):0.000379936):0.000574824,(1210:0.001039855,(757:0.000073574,1074:0.000073574):0.000966281):0.000205714):0.000923333):0.003201157):0.015811402,(((435:0.000405504,1258:0.000405504):0.003554498,(((1198:0.000603236,(902:0.000554510,(536:0.000252223,(966:0.000174599,(793:0.000032035,1034:0.000032035):0.000142564):0.000077624):0.000302287):0.000048726):0.000430985,((327:0.000152096,((281:0.000040372,853:0.000040372):0.000079258,(627:0.000074133,1253:0.000074133):0.000045496):0.000032466):0.000508828,(503:0.000492153,(768:0.000207350,920:0.000207350):0.000284803):0.000168770):0.000373298):0.002076544,(((550:0.000818749,(143:0.000247753,1020:0.000247753):0.000570996):0.000685855,(488:0.000934996,((1009:0.000127988,1297:0.000127988):0.000743073,(862:0.000261364,1075:0.000261364):0.000609697):0.000063935):0.000569607):0.000560060,((987:0.000318866,(884:0.000105140,958:0.000105140):0.000213725):0.001290502,((923:0.000300777,(73:0.000271973,568:0.000271973):0.000028804):0.000353849,(1180:0.000567945,((231:0.000032164,417:0.000032164):0.000504726,(1039:0.000250202,(1320:0.000191986,(280:0.000053026,1288:0.000053026):0.000138960):0.000058216):0.000286688):0.000031055):0.000086680):0.000954741):0.000455297):0.001046101):0.000849237):0.003314910,(((501:0.001279136,((635:0.000087149,780:0.000087149):0.000524554,((1225:0.000048513,1268:0.000048513):0.000262053,(766:0.000131692,821:0.000131692):0.000178874):0.000301137):0.000667433):0.001294500,((1166:0.001009868,(15:0.000968502,(440:0.000557174,1195:0.000557174):0.000411328):0.000041366):0.001297674,((871:0.000773679,((505:0.000415186,(1131:0.000064652,1226:0.000064652):0.000350534):0.000348184,(698:0.000719768,(122:0.000368155,(473:0.000170076,(629:0.000068086,804:0.000068086):0.000101989):0.000198080):0.000351613):0.000043602):0.000010309):0.000866303,(((1094:0.000283964,(17:0.000102155,1042:0.000102155):0.000181809):0.000378417,(150:0.000376700,207:0.000376700):0.000285681):0.000519816,(336:0.000974352,859:0.000974352):0.000207845):0.000457786):0.000667559):0.000266094):0.003357847,((((219:0.000926858,223:0.000926858):0.000233994,(((831:0.000397440,994:0.000397440):0.000430879,(1068:0.000681724,(582:0.000451051,(704:0.000203208,1249:0.000203208):0.000247843):0.000230673):0.000146595):0.000203583,(405:0.000948506,711:0.000948506):0.000083395):0.000128950):0.001282807,((408:0.000312309,493:0.000312309):0.001525153,((1102:0.000403953,(543:0.000257628,723:0.000257628):0.000146325):0.001013316,((980:0.000728433,(956:0.000231913,(878:0.000134539,927:0.000134539):0.000097373):0.000496521):0.000200081,(182:0.000827733,(388:0.000607882,((593:0.000053439,710:0.000053439):0.000462907,(91:0.000321774,(1006:0.000221431,(1194:0.000058112,(397:0.000023263,1165:0.000023263):0.000034849):0.000163319):0.000100343):0.000194572):0.000091536):0.000219850):0.000100782):0.000488755):0.000420193):0.000606196):0.003082426,(((((((585:0.000530198,(176:0.000063377,750:0.000063377):0.000466821):0.000093933,(40:0.000589485,639:0.000589485):0.000034646):0.000454699,(914:0.001038878,1310:0.001038878):0.000039952):0.000130594,(736:0.001176712,1287:0.001176712):0.000032712):0.000458356,((((277:0.000500244,1028:0.000500244):0.000318000,((283:0.000196870,400:0.000196870):0.000579448,(900:0.000249260,1191:0.000249260):0.000527058):0.000041926):0.000272044,(((266:0.000270464,(975:0.000201807,(313:0.000169103,638:0.000169103):0.000032705):0.000068657):0.000534594,(337:0.000803864,(590:0.000097530,996:0.000097530):0.000706334):0.000001193):0.000212633,((241:0.000167099,1301:0.000167099):0.000741582,(296:0.000223296,747:0.000223296):0.000685385):0.000109010):0.000072597):0.000280671,((187:0.000299817,1286:0.000299817):0.000871540,(288:0.000643705,(378:0.000576947,(707:0.000477433,(583:0.000410855,(686:0.000144102,((203:0.000029083,1154:0.000029083):0.000106638,(510:0.000134644,(1236:0.000099528,(1178:0.000065620,(1069:0.000005124,1186:0.000005124):0.000060496):0.000033908):0.000035116):0.000001077):0.000008381):0.000266752):0.000066578):0.000099514):0.000066758):0.000527652):0.000199602):0.000296821):0.000965246,((((13:0.000635624,962:0.000635624):0.000537047,((355:0.000100576,799:0.000100576):0.000933536,(1242:0.000552732,(795:0.000522451,1051:0.000522451):0.000030281):0.000481380):0.000138559):0.000524797,((634:0.000499226,(959:0.000388469,(911:0.000091487,1164:0.000091487):0.000296982):0.000110756):0.000981963,(1015:0.000650184,((1125:0.000186159,(579:0.000031867,713:0.000031867):0.000154292):0.000461708,(413:0.000268797,674:0.000268797):0.000379070):0.000002317):0.000831004):0.000216279):0.000266743,(1025:0.001830213,((11:0.000549065,1057:0.000549065):0.001067338,((814:0.000474694,(133:0.000185197,(700:0.000047261,965:0.000047261):0.000137936):0.000289497):0.000565306,((985:0.000351000,(9:0.000268540,226:0.000268540):0.000082460):0.000215934,(589:0.000404742,(617:0.000340400,(97:0.000160433,140:0.000160433):0.000179967):0.000064342):0.000162193):0.000473065):0.000576403):0.000213811):0.000133997):0.000668816):0.002684293,((14:0.000120109,(517:0.000069464,1123:0.000069464):0.000050646):0.002736314,(((1190:0.000659130,(512:0.000215103,1290:0.000215103):0.000444027):0.000536645,((395:0.000126135,(329:0.000109830,528:0.000109830):0.000016305):0.000952527,((243:0.000501023,1032:0.000501023):0.000398148,((198:0.000025410,412:0.000025410):0.000861628,(1238:0.000218039,(326:0.000038643,1021:0.000038643):0.000179396):0.000668999):0.000012133):0.000179490):0.000117113):0.000508286,((250:0.000427877,482:0.000427877):0.001160920,((1097:0.000245039,1185:0.000245039):0.001070849,(526:0.000847479,(1312:0.000244290,(1043:0.000047297,1084:0.000047297):0.000196993):0.000603189):0.000468410):0.000272908):0.000115264):0.001152363):0.002460895):0.000208765):0.000405400):0.001343430):0.013906550):0.005380109):0.074779443):0.030385695);
#

open(IN_TREE, "$tree") or die "Could not open file $tree\n";

if ($verbose) {
	print "\n################################################################################";
	print "\nRecording tree from $tree...\n";
}

my $tree = '';

# Store first tree in file
while(<IN_TREE>) {
	chomp($_);
	my $line = $_;
	if($line =~ /^\(/) { # line starts with an opening parentheses
		if($line =~ /\);$/) { # line ends with a closing parentheses and semicolon
			$tree = $line;
			last;
		}
	}
}

close IN_TREE;

if($tree eq '') {
	die "\n### WARNING: NO TREE IN TREE FILE. Must begin with '(' and end with ');'. SCRIPT TERMINATED.\n\n";
}

# Trim end of tree if ';' or whitespace
#print "\nTREE:\n$tree\n\n";
while(substr($tree, -1) =~ /[\s\;]/) {
	chop($tree);
}
#print "\nPROCESSED TREE:\n$tree\n\n";

if($tree =~ /(\,[a-zA-Z0-9\.\-\|\:\']+\,)/) {
	die "\n### WARNING: TREE MUST BE STRICTLY BIFURCATING BUT CONTAINS A POLYTOMY: \*\*\*$1\*\*\*\. SCRIPT TERMINATED.\n\n";
}

my $tree_opening_paren_count = ($tree =~ s/\(/\(/g);
my $tree_closing_paren_count = ($tree =~ s/\)/\)/g);

unless($tree_opening_paren_count > 0 && $tree_opening_paren_count == $tree_closing_paren_count) {
	die "\n### WARNING: TREE MUST CONTAIN THE SAME NUMBER OF OPENING (currently $tree_opening_paren_count\) AND CLOSING (currently $tree_closing_paren_count\) PARENTHESES. SCRIPT TERMINATED.\n\n";
}


##########################################################################################
# Read in the seed sequence from the fasta file
my $seed_seq = '';
my $seq_num = 0;

open(IN_FASTA, "$seed_sequence") or die "Could not open file $seed_sequence\n";

if($verbose) {
	print "\n################################################################################";
	print "\nRecording seed sequence data from $seed_sequence...\n";
}

while(<IN_FASTA>) {
	chomp;
	if(/>/) {
		if($seq_num == 0) {
			$seq_num ++;
		} else {
			last;
		}
	} else {
		$seed_seq .= $_;
	}
}

close IN_FASTA;

$seed_seq = uc($seed_seq);
$seed_seq =~ tr/U/T/;


##########################################################################################
# Read in the rate matrix
my %rate_matrix;
my @ordered_trinucleotides = qw/AAA AAC AAG AAT
								ACA ACC ACG ACT
								AGA AGC AGG AGT
								ATA ATC ATG ATT
								CAA CAC CAG CAT
								CCA CCC CCG CCT
								CGA CGC CGG CGT
								CTA CTC CTG CTT
								GAA GAC GAG GAT
								GCA GCC GCG GCT
								GGA GGC GGG GGT
								GTA GTC GTG GTT
								TAA TAC TAG TAT
								TCA TCC TCG TCT
								TGA TGC TGG TGT
								TTA TTC TTG TTT/;
# ^ each of those corresponds to ONE ROW of the rate matrix

open(IN_RATE_MATRIX, "$rate_matrix") or die "Could not open file $rate_matrix\n";

if ($verbose) {
	print "\n################################################################################";
	print "\nRecording rate matrix from $rate_matrix...\n";
}

my $row_index = 0;

while(<IN_RATE_MATRIX>) {
	chomp;
	if (/([0-9\.eE\-]+)\s+([0-9\.eE\-]+)\s+([0-9\.eE\-]+)\s+([0-9\.eE\-]+)$/) { # in case there's a header or a column of names in front
		$rate_matrix{$ordered_trinucleotides[$row_index]}->{'A'} = $1;
		$rate_matrix{$ordered_trinucleotides[$row_index]}->{'C'} = $2;
		$rate_matrix{$ordered_trinucleotides[$row_index]}->{'G'} = $3;
		$rate_matrix{$ordered_trinucleotides[$row_index]}->{'T'} = $4;
		
		$row_index++;
	}
}

close IN_RATE_MATRIX;

unless($row_index == 64) { # i.e., one more than the last real index
	die "\n### WARNING: There must be 64 rows X 4 columns of data in the rate matrix.\n".
		"### trivolver terminated.\n\n";
}


##########################################################################################
# STORE THE TREE AS A MULTIDMINENSIONAL HASH

if ($verbose) {
	print "\n################################################################################\n";
	print "Recursively trivolving sequences from the root...\n";
}

# Examples
# (1:0.000318866,(2:0.000105140,3:0.000105140):0.000213725);
# (((((847:0.002850726,((580:0.000074233,894:0.000074233):0.002455480,(106:0.000840287,((538:0.000151096,1193:0.000151096):0.000552187,(((68:0.000141423,235:0.000141423):0.000306048,(419:0.000426335,1257:0.000426335):0.000021136):0.000154192,(722:0.000559850,(571:0.000512007,(893:0.000263856,(772:0.000243586,(695:0.000084251,769:0.000084251):0.000159335):0.000020270):0.000248150):0.000047843):0.000041813):0.000101620):0.000137004):0.001689426):0.000321013):0.004083729,(((650:0.000594102,(913:0.000453985,969:0.000453985):0.000140117):0.000599726,(190:0.000678085,255:0.000678085):0.000515742):0.003733546,((((513:0.000661413,(128:0.000526979,(135:0.000151900,320:0.000151900):0.000375079):0.000134434):0.000270983,(1303:0.000729321,(540:0.000575480,(681:0.000132216,(188:0.000014684,423:0.000014684):0.000117532):0.000443264):0.000153841):0.000203075):0.001456711,(((626:0.000459969,(607:0.000345876,(539:0.000151144,(369:0.000148560,940:0.000148560):0.000002584):0.000194732):0.000114093):0.000956210,(648:0.000500164,(125:0.000171550,141:0.000171550):0.000328614):0.000916015):0.000698676,((730:0.001246265,(1298:0.000349872,(1045:0.000333851,(216:0.000030301,624:0.000030301):0.000303550):0.000016022):0.000896392):0.000798229,(1064:0.001375590,(1:0.001219750,790:0.001219750):0.000155840):0.000668903):0.000070362):0.000274251):0.000959912,((237:0.001655212,((54:0.000917978,((1255:0.000378890,(551:0.000254615,964:0.000254615):0.000124275):0.000517957,(1189:0.000587866,(214:0.000451661,361:0.000451661):0.000136205):0.000308981):0.000021131):0.000688737,(221:0.001287557,(477:0.000305473,(565:0.000262947,763:0.000262947):0.000042526):0.000982084):0.000319157):0.000048498):0.001249580,((870:0.001209221,((42:0.000139136,(151:0.000115649,937:0.000115649):0.000023488):0.000968919,((784:0.000547901,1162:0.000547901):0.000471189,((1040:0.000440774,1163:0.000440774):0.000256395,(869:0.000532908,((659:0.000043024,915:0.000043024):0.000322777,(292:0.000201128,480:0.000201128):0.000164674):0.000167106):0.000164261):0.000321921):0.000088965):0.000101165):0.001389399,((613:0.001130107,((365:0.000473173,366:0.000473173):0.000577317,(474:0.000748891,809:0.000748891):0.000301599):0.000079617):0.000985075,((205:0.000998530,(559:0.000442278,1033:0.000442278):0.000556252):0.000965461,(((360:0.000669742,((683:0.000415819,1285:0.000415819):0.000133193,(924:0.000481300,((83:0.000027291,196:0.000027291):0.000232247,(146:0.000085086,998:0.000085086):0.000174452):0.000221763):0.000067712):0.000120730):0.000210490,((1031:0.000535661,(114:0.000510136,(234:0.000119823,416:0.000119823):0.000390313):0.000025524):0.000280682,(131:0.000763207,(302:0.000125237,(353:0.000124846,1004:0.000124846):0.000000391):0.000637970):0.000053136):0.000063889):0.000758338,((55:0.000039990,740:0.000039990):0.001399613,(((735:0.000214916,1117:0.000214916):0.000512747,(127:0.000697327,872:0.000697327):0.000030336):0.000659911,(1002:0.000842260,(720:0.000049202,922:0.000049202):0.000793058):0.000545313):0.000052030):0.000198968):0.000325420):0.000151192):0.000483437):0.000306173):0.000444226):0.001578355):0.002007083):0.007076698,(((1093:0.000118684,(403:0.000104899,1302:0.000104899):0.000013786):0.002753518,(874:0.002510807,(((701:0.000770168,(1211:0.000603542,(371:0.000505128,(622:0.000364788,(688:0.000060298,836:0.000060298):0.000304490):0.000140339):0.000098414):0.000166625):0.000450735,(484:0.001188351,(516:0.000683583,(43:0.000256188,(232:0.000050688,(811:0.000003361,1054:0.000003361):0.000047327):0.000205500):0.000427395):0.000504768):0.000032551):0.001280547,((1142:0.000833052,(399:0.000617480,984:0.000617480):0.000215572):0.000968148,(499:0.001170227,((664:0.000884758,(1086:0.000268037,((299:0.000187015,1267:0.000187015):0.000060176,(496:0.000245181,848:0.000245181):0.000002010):0.000020846):0.000616721):0.000218037,(775:0.001012701,868:0.001012701):0.000090093):0.000067432):0.000630973):0.000700249):0.000009358):0.000361395):0.005697172,((25:0.000388087,(1292:0.000222771,(291:0.000047898,649:0.000047898):0.000174873):0.000165317):0.005262719,((468:0.000710797,(1204:0.000294913,((304:0.000041033,504:0.000041033):0.000192208,(349:0.000227851,((52:0.000081217,867:0.000081217):0.000134994,(19:0.000215969,1181:0.000215969):0.000000241):0.000011640):0.000005390):0.000061672):0.000415884):0.000446065,((1063:0.000612070,((665:0.000300307,(39:0.000296724,(1126:0.000083312,(30:0.000006131,1175:0.000006131):0.000077181):0.000213411):0.000003584):0.000274908,(827:0.000336432,(273:0.000233350,(1318:0.000131472,(777:0.000043908,1089:0.000043908):0.000087564):0.000101878):0.000103082):0.000238784):0.000036854):0.000477117,(((212:0.000071126,928:0.000071126):0.000264904,(801:0.000204930,(173:0.000110495,1239:0.000110495):0.000094435):0.000131100):0.000596699,(595:0.000618465,1108:0.000618465):0.000314263):0.000156459):0.000067674):0.004493944):0.002918569):0.005441779):0.026022406,((687:0.001711160,((1222:0.000230580,((930:0.000058978,943:0.000058978):0.000105364,(976:0.000112847,(60:0.000080774,382:0.000080774):0.000032074):0.000051495):0.000066238):0.000770704,(876:0.000685753,(77:0.000578082,(599:0.000558913,(1197:0.000490175,(950:0.000481625,(903:0.000156292,1314:0.000156292):0.000325334):0.000008549):0.000068738):0.000019169):0.000107671):0.000315532):0.000709876):0.028543154,(((44:0.001775737,(1219:0.001631021,((((813:0.000241805,(997:0.000098934,1087:0.000098934):0.000142870):0.000146545,(130:0.000373423,317:0.000373423):0.000014926):0.000108403,(37:0.000409489,586:0.000409489):0.000087263):0.000989642,(((712:0.000509213,1279:0.000509213):0.000199656,(164:0.000691719,(183:0.000078741,347:0.000078741):0.000612978):0.000017150):0.000385971,((632:0.000069101,714:0.000069101):0.000732713,(546:0.000344172,931:0.000344172):0.000457642):0.000293026):0.000391554):0.000144628):0.000144716):0.001670062,(((805:0.000652736,1321:0.000652736):0.000138199,(338:0.000742175,(454:0.000553825,(206:0.000409238,(738:0.000314052,(264:0.000220824,879:0.000220824):0.000093228):0.000095186):0.000144587):0.000188350):0.000048759):0.001831826,((289:0.001104519,(654:0.000146784,1240:0.000146784):0.000957734):0.000503564,((225:0.000248598,682:0.000248598):0.001327074,((621:0.000030516,1259:0.000030516):0.001033067,(177:0.000579903,(201:0.000021238,597:0.000021238):0.000558666):0.000483679):0.000512089):0.000032411):0.001014677):0.000823040):0.003399109,((((21:0.000754548,(86:0.000147074,(837:0.000134239,(566:0.000087167,(169:0.000032339,(1143:0.000026428,1151:0.000026428):0.000005912):0.000054828):0.000047072):0.000012835):0.000607474):0.001580304,((611:0.000198749,(817:0.000173875,(418:0.000004677,1161:0.000004677):0.000169198):0.000024874):0.001259823,((75:0.000465863,(350:0.000214558,691:0.000214558):0.000251304):0.000160408,((1155:0.000078384,(136:0.000051109,933:0.000051109):0.000027275):0.000536630,(376:0.000497842,(211:0.000079632,508:0.000079632):0.000418210):0.000117172):0.000011257):0.000832301):0.000876280):0.001250257,((((422:0.000622242,(256:0.000197097,(155:0.000160130,1206:0.000160130):0.000036967):0.000425145):0.000816529,((197:0.000198483,1017:0.000198483):0.000875485,(602:0.000753796,(464:0.000176885,(297:0.000142149,358:0.000142149):0.000034736):0.000576911):0.000320173):0.000364802):0.000431165,((24:0.000097494,1291:0.000097494):0.001409378,(((119:0.000468879,316:0.000468879):0.000276299,(375:0.000624531,(830:0.000581835,((1035:0.000190021,1107:0.000190021):0.000255818,(507:0.000402107,(261:0.000283184,1218:0.000283184):0.000118924):0.000043732):0.000135996):0.000042697):0.000120647):0.000442525,((270:0.000489651,(1058:0.000485534,(156:0.000352717,1217:0.000352717):0.000132817):0.000004117):0.000488532,(774:0.000786111,(633:0.000324196,(525:0.000009035,1182:0.000009035):0.000315161):0.000461915):0.000192072):0.000209520):0.000319168):0.000363064):0.001523813,((986:0.001533539,((((530:0.000215910,1115:0.000215910):0.000147178,(759:0.000294438,1047:0.000294438):0.000068649):0.000359567,(1003:0.000430023,(822:0.000374955,1220:0.000374955):0.000055068):0.000292632):0.000484356,((992:0.000308503,(469:0.000241178,(1316:0.000209779,(899:0.000188661,1203:0.000188661):0.000021118):0.000031399):0.000067325):0.000874052,((898:0.000475687,(787:0.000006917,1272:0.000006917):0.000468770):0.000636283,((941:0.000887445,((322:0.000387771,(252:0.000024418,547:0.000024418):0.000363353):0.000388994,(1056:0.000453697,(552:0.000252154,725:0.000252154):0.000201543):0.000323068):0.000110679):0.000193575,(1266:0.000941708,(1273:0.000740411,((999:0.000377287,(470:0.000273289,1081:0.000273289):0.000103998):0.000324836,(145:0.000456204,((354:0.000005292,433:0.000005292):0.000104061,(307:0.000042755,421:0.000042755):0.000066598):0.000346851):0.000245919):0.000038288):0.000201297):0.000139311):0.000030951):0.000070585):0.000024456):0.000326528):0.000509990,(((1245:0.000304098,1263:0.000304098):0.000625558,(542:0.000887796,(917:0.000336558,(846:0.000268340,1062:0.000268340):0.000068217):0.000551239):0.000041860):0.000978327,(((973:0.000567247,(439:0.000471144,1080:0.000471144):0.000096103):0.000342811,(1128:0.000610745,(103:0.000524213,(450:0.000090510,1111:0.000090510):0.000433703):0.000086532):0.000299313):0.000361180,((10:0.000222753,311:0.000222753):0.000924187,((318:0.000591783,(276:0.000572674,(6:0.000311158,351:0.000311158):0.000261516):0.000019109):0.000120259,(121:0.000711327,(379:0.000658024,((684:0.000061135,(29:0.000006628,(771:0.000004697,850:0.000004697):0.000001931):0.000054507):0.000220274,(265:0.000152589,374:0.000152589):0.000128820):0.000376615):0.000053304):0.000000715):0.000434897):0.000124298):0.000636746):0.000135546):0.001350220):0.000191360):0.001102318,(((1071:0.001117436,(246:0.000722574,((406:0.000099302,936:0.000099302):0.000341535,(497:0.000418355,(1159:0.000336668,(72:0.000136971,954:0.000136971):0.000199697):0.000081687):0.000022482):0.000281738):0.000394862):0.000177340,((1196:0.000880362,(267:0.000184752,1212:0.000184752):0.000695610):0.000348086,(696:0.001157106,((1037:0.000349014,1284:0.000349014):0.000116198,(669:0.000354232,1223:0.000354232):0.000110980):0.000691894):0.000071343):0.000066327):0.003386898,((((66:0.000906340,(891:0.000228702,1135:0.000228702):0.000677638):0.000302403,(1150:0.001141998,((209:0.000397392,1101:0.000397392):0.000309116,(111:0.000555896,531:0.000555896):0.000150611):0.000435491):0.000066745):0.001167138,((78:0.000539465,818:0.000539465):0.001096257,((974:0.000510639,1013:0.000510639):0.000453540,(1001:0.000625412,1260:0.000625412):0.000338766):0.000671544):0.000740159):0.000058836,(((652:0.000493436,(1000:0.000468569,(1122:0.000272944,1243:0.000272944):0.000195625):0.000024866):0.000347501,((1138:0.000433596,(33:0.000144597,529:0.000144597):0.000288999):0.000143355,(56:0.000453487,179:0.000453487):0.000123464):0.000263986):0.001542660,(((((134:0.000869980,(751:0.000659983,((254:0.000567493,677:0.000567493):0.000074248,((1305:0.000354875,(745:0.000328360,(692:0.000120130,1044:0.000120130):0.000208230):0.000026515):0.000258265,(282:0.000534801,680:0.000534801):0.000078339):0.000028601):0.000018241):0.000209997):0.000178628,((1016:0.000572341,(85:0.000088336,972:0.000088336):0.000484005):0.000442028,((59:0.000254228,104:0.000254228):0.000656483,(569:0.000569565,(22:0.000531611,(509:0.000249733,(466:0.000007216,963:0.000007216):0.000242517):0.000281878):0.000037954):0.000341146):0.000103658):0.000034239):0.000405933,(166:0.001253969,(323:0.000979585,(348:0.000935655,816:0.000935655):0.000043930):0.000274384):0.000200572):0.000017980,((1275:0.000560515,(532:0.000155691,1104:0.000155691):0.000404824):0.000907962,((1030:0.001048046,(840:0.000991382,1304:0.000991382):0.000056664):0.000164749,(((614:0.000179357,1139:0.000179357):0.000709834,(1085:0.000468340,(199:0.000220785,(588:0.000156120,1100:0.000156120):0.000064665):0.000247555):0.000420852):0.000280115,(452:0.000998084,((886:0.000352805,(76:0.000093184,245:0.000093184):0.000259622):0.000258027,(314:0.000379943,(625:0.000038476,(606:0.000017383,1076:0.000017383):0.000021092):0.000341467):0.000230890):0.000387252):0.000171222):0.000043489):0.000255681):0.000004044):0.000723145,((247:0.000318090,451:0.000318090):0.001614348,(((1018:0.000472514,(57:0.000329683,990:0.000329683):0.000142831):0.000870819,(1306:0.001325199,(1146:0.001277563,1278:0.001277563):0.000047636):0.000018133):0.000515448,((((170:0.000320512,262:0.000320512):0.000820407,(767:0.000459813,(94:0.000104373,96:0.000104373):0.000355440):0.000681107):0.000229903,(471:0.001237696,((192:0.000356190,1061:0.000356190):0.000832870,(1029:0.001069286,(((217:0.000160659,882:0.000160659):0.000293544,(564:0.000308508,(1308:0.000306428,(472:0.000205974,721:0.000205974):0.000100454):0.000002080):0.000145695):0.000487727,(1048:0.000867138,(357:0.000320830,(594:0.000313704,663:0.000313704):0.000007125):0.000546308):0.000074793):0.000127355):0.000119775):0.000048635):0.000133126):0.000257006,(((782:0.000171058,(8:0.000157164,1050:0.000157164):0.000013893):0.000419702,(340:0.000311863,(305:0.000134633,708:0.000134633):0.000177230):0.000278897):0.000802631,((952:0.000054491,1078:0.000054491):0.001206803,(1187:0.000570321,(460:0.000487192,584:0.000487192):0.000083129):0.000690974):0.000132097):0.000234437):0.000230952):0.000073658):0.000263228):0.000187930):0.000051121):0.002246956):0.000005753):0.002157481):0.023409406):0.009779247):0.091693148,((((((274:0.000232026,389:0.000232026):0.000841232,((430:0.000280998,641:0.000280998):0.000776821,(112:0.000500135,(32:0.000241504,1129:0.000241504):0.000258631):0.000557684):0.000015439):0.000671561,((((41:0.000087119,392:0.000087119):0.000561642,(429:0.000521412,((1215:0.000270085,1269:0.000270085):0.000225472,((524:0.000111744,(623:0.000108973,752:0.000108973):0.000002771):0.000379979,(63:0.000445123,(1130:0.000110551,(581:0.000102846,689:0.000102846):0.000007705):0.000334572):0.000046599):0.000003834):0.000025855):0.000127348):0.000746809,((301:0.000453024,(779:0.000258514,890:0.000258514):0.000194510):0.000598931,((548:0.000254816,756:0.000254816):0.000564216,((181:0.000049419,662:0.000049419):0.000467926,((240:0.000000849,685:0.000000849):0.000267821,(306:0.000052519,534:0.000052519):0.000216151):0.000248675):0.000301687):0.000232923):0.000343615):0.000201135,((409:0.001449067,((562:0.001094468,(1153:0.000549380,(193:0.000097274,330:0.000097274):0.000452106):0.000545088):0.000126301,((858:0.000411388,(70:0.000040382,856:0.000040382):0.000371006):0.000747945,(601:0.000705875,815:0.000705875):0.000453459):0.000061436):0.000228298):0.000020078,((646:0.000588386,(108:0.000412929,458:0.000412929):0.000175457):0.000875808,(((483:0.000497933,(12:0.000330041,705:0.000330041):0.000167892):0.000692152,((475:0.000464350,855:0.000464350):0.000624021,((845:0.000071768,906:0.000071768):0.000754603,(1073:0.000753318,(465:0.000193170,(168:0.000168488,1019:0.000168488):0.000024682):0.000560149):0.000073053):0.000262000):0.000101714):0.000256563,(((1114:0.000734736,((1095:0.000060073,1283:0.000060073):0.000470353,(887:0.000277483,(693:0.000091696,798:0.000091696):0.000185787):0.000252942):0.000204311):0.000120261,((521:0.000422981,(271:0.000304791,637:0.000304791):0.000118190):0.000431142,(79:0.000721312,(53:0.000167189,362:0.000167189):0.000554123):0.000132811):0.000000874):0.000497949,((1022:0.000411356,(161:0.000289217,437:0.000289217):0.000122138):0.000585119,(295:0.000908503,(1077:0.000233978,(333:0.000218488,1271:0.000218488):0.000015491):0.000674525):0.000087972):0.000356471):0.000093702):0.000017547):0.000004951):0.000127559):0.000148115):0.002557647,(((81:0.000565055,765:0.000565055):0.000799039,(926:0.000705910,1171:0.000705910):0.000658183):0.001292621,(((993:0.000356470,(457:0.000269711,605:0.000269711):0.000086759):0.001045500,(((251:0.000124261,908:0.000124261):0.000542299,(191:0.000623892,755:0.000623892):0.000042668):0.000236033,(1082:0.000849974,((7:0.000136403,883:0.000136403):0.000021616,(833:0.000138651,897:0.000138651):0.000019368):0.000691955):0.000052618):0.000499378):0.000158371,((((702:0.000032370,967:0.000032370):0.000465082,(481:0.000322210,(228:0.000145791,428:0.000145791):0.000176419):0.000175242):0.000410506,((310:0.000690513,(490:0.000090474,(157:0.000014243,574:0.000014243):0.000076231):0.000600040):0.000201360,(1026:0.000790483,(778:0.000737155,(1241:0.000701983,((308:0.000445202,861:0.000445202):0.000174621,(1228:0.000491607,((390:0.000148026,1230:0.000148026):0.000305758,(364:0.000377069,(90:0.000129265,1065:0.000129265):0.000247804):0.000076715):0.000037823):0.000128216):0.000082160):0.000035172):0.000053327):0.000101391):0.000016085):0.000548707,((717:0.000051875,1307:0.000051875):0.001307072,(102:0.000659660,(315:0.000270626,345:0.000270626):0.000389034):0.000699288):0.000097718):0.000103676):0.001096374):0.001645752):0.010784367,((((113:0.000701385,(1234:0.000686609,((919:0.000145977,(443:0.000047797,743:0.000047797):0.000098180):0.000384949,((655:0.000159059,1106:0.000159059):0.000339452,(463:0.000283098,(910:0.000175205,1254:0.000175205):0.000107893):0.000215413):0.000032415):0.000155683):0.000014776):0.001581644,(1319:0.001809885,((715:0.000474009,(533:0.000046351,1005:0.000046351):0.000427659):0.001217936,((441:0.000829005,(572:0.000373809,((165:0.000238365,(591:0.000150938,(1296:0.000067121,(20:0.000002549,944:0.000002549):0.000064572):0.000083818):0.000087427):0.000060071,(806:0.000279516,1010:0.000279516):0.000018920):0.000075373):0.000455196):0.000715089,(1144:0.001474861,(658:0.000918258,(95:0.000844410,447:0.000844410):0.000073848):0.000556603):0.000069234):0.000147851):0.000117940):0.000473144):0.005290329,(((((545:0.000329318,(36:0.000027633,1053:0.000027633):0.000301686):0.000653052,(3:0.000544267,527:0.000544267):0.000438104):0.000850897,(23:0.001355385,(((812:0.000350468,(600:0.000207030,(1183:0.000064391,(290:0.000003480,746:0.000003480):0.000060910):0.000142639):0.000143438):0.000151613,((1213:0.000107746,(142:0.000089318,415:0.000089318):0.000018429):0.000388186,(18:0.000165644,703:0.000165644):0.000330288):0.000006149):0.000564054,(4:0.000733964,((1124:0.000574252,(825:0.000568263,((162:0.000142163,(50:0.000029564,1116:0.000029564):0.000112600):0.000352142,((99:0.000090196,781:0.000090196):0.000225094,(242:0.000246545,(367:0.000204425,642:0.000204425):0.000042120):0.000068745):0.000179016):0.000073957):0.000005990):0.000082175,(459:0.000596578,(105:0.000240344,1152:0.000240344):0.000356234):0.000059849):0.000077537):0.000332170):0.000289250):0.000477883):0.000320117,((((272:0.000036731,706:0.000036731):0.000405479,(334:0.000082868,1121:0.000082868):0.000359342):0.000689080,((598:0.000089305,776:0.000089305):0.000904061,((352:0.000229890,935:0.000229890):0.000151065,(671:0.000346002,(88:0.000265833,175:0.000265833):0.000080168):0.000034953):0.000612411):0.000137924):0.000927533,(((485:0.000096197,676:0.000096197):0.000844659,((27:0.000141187,479:0.000141187):0.000194614,(294:0.000310566,486:0.000310566):0.000025235):0.000605055):0.000600111,(((489:0.000005278,1256:0.000005278):0.000717662,(((253:0.000213698,865:0.000213698):0.000294373,(661:0.000320173,939:0.000320173):0.000187898):0.000200553,(174:0.000600110,(616:0.000564519,(28:0.000071905,770:0.000071905):0.000492614):0.000035590):0.000108514):0.000014317):0.000543873,((159:0.000366917,1289:0.000366917):0.000726666,((236:0.000149869,506:0.000149869):0.000413207,(380:0.000455691,(342:0.000124526,1147:0.000124526):0.000331165):0.000107384):0.000530507):0.000173231):0.000274154):0.000517856):0.000094561):0.004947315,(((541:0.000211426,(407:0.000129623,1046:0.000129623):0.000081803):0.000768241,(647:0.000455054,761:0.000455054):0.000524613):0.003992303,((978:0.000876325,(716:0.000276226,(402:0.000251804,953:0.000251804):0.000024422):0.000600099):0.000920875,(((1012:0.000234889,(359:0.000121550,807:0.000121550):0.000113340):0.000241638,(391:0.000356156,1248:0.000356156):0.000120371):0.000448631,((51:0.000156481,(741:0.000045648,1250:0.000045648):0.000110833):0.000553369,((921:0.000089841,1132:0.000089841):0.000583891,(363:0.000518505,1109:0.000518505):0.000155227):0.000036119):0.000215308):0.000872042):0.003174771):0.002128729):0.000472659):0.002984498,(((((71:0.000950396,(144:0.000346666,(678:0.000188954,1167:0.000188954):0.000157713):0.000603730):0.000635276,((764:0.000719659,(298:0.000468650,(268:0.000336831,849:0.000336831):0.000131819):0.000251010):0.000745036,(427:0.001135268,(62:0.000010789,1274:0.000010789):0.001124479):0.000329427):0.000120977):0.001058950,(((802:0.000646294,(544:0.000226865,732:0.000226865):0.000419429):0.000267141,(1105:0.000725171,((230:0.000004194,949:0.000004194):0.000208959,(737:0.000152952,948:0.000152952):0.000060201):0.000512017):0.000188264):0.001553416,((749:0.000995354,762:0.000995354):0.000722021,(126:0.001083373,((726:0.000389514,1299:0.000389514):0.000550890,(107:0.000566350,(222:0.000473456,(803:0.000178486,1052:0.000178486):0.000294971):0.000092893):0.000374054):0.000142969):0.000634002):0.000749476):0.000177771):0.000923910,(((((309:0.000504789,(514:0.000116801,(287:0.000113423,(1027:0.000067454,(515:0.000066283,1205:0.000066283):0.000001171):0.000045969):0.000003377):0.000387989):0.000700746,((1244:0.000236890,1315:0.000236890):0.000621977,(916:0.000258812,1066:0.000258812):0.000600054):0.000346669):0.000627515,((666:0.000962297,(1231:0.000657587,(729:0.000603321,(120:0.000577126,(1120:0.000549824,(1261:0.000184124,1311:0.000184124):0.000365700):0.000027302):0.000026195):0.000054266):0.000304710):0.000476608,(((((554:0.000230040,(98:0.000091211,618:0.000091211):0.000138829):0.000183062,(979:0.000374407,(832:0.000291572,1209:0.000291572):0.000082836):0.000038695):0.000243340,(244:0.000651244,((1247:0.000320230,(694:0.000232473,(74:0.000099894,1119:0.000099894):0.000132579):0.000087757):0.000278584,(((335:0.000055906,875:0.000055906):0.000158550,(69:0.000175197,(35:0.000005850,233:0.000005850):0.000169347):0.000039259):0.000228000,(651:0.000301684,1251:0.000301684):0.000140772):0.000156357):0.000052431):0.000005198):0.000349773,(620:0.000782024,(185:0.000641283,(895:0.000579536,(523:0.000275836,905:0.000275836):0.000303700):0.000061747):0.000140741):0.000224192):0.000094928,(461:0.001047890,(218:0.000175573,1113:0.000175573):0.000872317):0.000053254):0.000337761):0.000394146):0.000892483,((((988:0.000475325,(553:0.000347564,866:0.000347564):0.000127760):0.000158498,(535:0.000578140,(110:0.000385972,154:0.000385972):0.000192167):0.000055683):0.000681330,((82:0.000260216,(263:0.000104284,971:0.000104284):0.000155932):0.000942705,((773:0.000420894,(100:0.000053131,1246:0.000053131):0.000367763):0.000062162,((788:0.000122596,1199:0.000122596):0.000314813,(896:0.000176148,(719:0.000029914,1169:0.000029914):0.000146233):0.000261262):0.000045647):0.000719865):0.000112231):0.001350757,(((1014:0.001109635,((109:0.000285955,(494:0.000157002,892:0.000157002):0.000128953):0.000819342,(1024:0.001059671,(49:0.000706360,947:0.000706360):0.000353311):0.000045626):0.000004339):0.000503842,((((487:0.000465903,((414:0.000184330,(455:0.000108918,1133:0.000108918):0.000075412):0.000192661,(269:0.000236229,981:0.000236229):0.000140761):0.000088913):0.000619513,(372:0.001067254,((286:0.000576078,445:0.000576078):0.000194965,(171:0.000624765,(178:0.000520772,1137:0.000520772):0.000103993):0.000146278):0.000296211):0.000018162):0.000312068,(((26:0.000314575,(189:0.000044065,942:0.000044065):0.000270510):0.000480764,(1070:0.000412886,((303:0.000054266,1177:0.000054266):0.000224311,(163:0.000054489,498:0.000054489):0.000224088):0.000134308):0.000382453):0.000500844,(48:0.001008242,(960:0.000035326,1156:0.000035326):0.000972917):0.000287941):0.000101300):0.000188583,((89:0.000500347,((786:0.000102835,797:0.000102835):0.000274368,(370:0.000337254,670:0.000337254):0.000039949):0.000123144):0.001035502,((118:0.000863525,229:0.000863525):0.000641461,(((476:0.000167662,1270:0.000167662):0.000106907,((132:0.000072864,1148:0.000072864):0.000148018,(733:0.000190795,(46:0.000073850,982:0.000073850):0.000116945):0.000030087):0.000053688):0.001210460,((5:0.000577163,(431:0.000494502,885:0.000494502):0.000082661):0.000398582,(210:0.000963428,1059:0.000963428):0.000012317):0.000509285):0.000019955):0.000030863):0.000050218):0.000027410):0.000586496,((1317:0.001175528,(791:0.000944124,(731:0.000499656,(881:0.000238070,(1011:0.000076355,1099:0.000076355):0.000161716):0.000261586):0.000444468):0.000231404):0.000514244,((841:0.000281391,(699:0.000158403,877:0.000158403):0.000122988):0.001305726,(((167:0.000798125,(148:0.000788126,(636:0.000212048,(1188:0.000164792,(115:0.000045567,854:0.000045567):0.000119225):0.000047256):0.000576078):0.000009999):0.000278218,(((558:0.000373378,(1214:0.000108777,1280:0.000108777):0.000264602):0.000180472,((1237:0.000073112,1294:0.000073112):0.000420235,(195:0.000104145,968:0.000104145):0.000389202):0.000060503):0.000263349,((1295:0.000306424,(918:0.000127184,938:0.000127184):0.000179240):0.000491585,(383:0.000660462,1170:0.000660462):0.000137547):0.000019190):0.000259144):0.000397373,(718:0.001083957,((332:0.000236784,1049:0.000236784):0.000527547,(220:0.000577882,346:0.000577882):0.000186450):0.000319626):0.000389758):0.000113402):0.000102655):0.000510201):0.000465936):0.000059624):0.000371562,((45:0.002077147,(1079:0.001196457,(734:0.001053075,(116:0.000260495,(249:0.000259937,1134:0.000259937):0.000000558):0.000792581):0.000143381):0.000880691):0.000698694,((1176:0.000892619,(404:0.000205759,800:0.000205759):0.000686860):0.001588643,(((604:0.000157165,796:0.000157165):0.000717971,(184:0.000813251,(644:0.000146648,1055:0.000146648):0.000666603):0.000061886):0.001381781,((1262:0.000444408,((258:0.000117456,697:0.000117456):0.000122128,(149:0.000170817,640:0.000170817):0.000068767):0.000204824):0.001640124,(((1158:0.000471173,(511:0.000420702,1235:0.000420702):0.000050471):0.000918698,(945:0.001129910,(434:0.000411201,(172:0.000288250,(1141:0.000250159,(500:0.000003919,1293:0.000003919):0.000246240):0.000038091):0.000122951):0.000718709):0.000259960):0.000529550,((((153:0.000200200,860:0.000200200):0.000465800,(47:0.000630960,(444:0.000043912,462:0.000043912):0.000587048):0.000035039):0.000325341,(204:0.000880459,1140:0.000880459):0.000110882):0.000650492,(((449:0.000348866,(667:0.000338677,863:0.000338677):0.000010189):0.000349924,(93:0.000365649,563:0.000365649):0.000333141):0.000905585,(224:0.001206086,(753:0.000002132,946:0.000002132):0.001203955):0.000398288):0.000037459):0.000277588):0.000165110):0.000172386):0.000224345):0.000294579):0.000321254):0.000471437):0.004843139,(((129:0.000496699,(656:0.000383409,(587:0.000198260,794:0.000198260):0.000185149):0.000113291):0.002477721,((537:0.000900876,668:0.000900876):0.001857789,((448:0.001537043,(139:0.001285893,(925:0.000312747,(970:0.000287233,1281:0.000287233):0.000025514):0.000973146):0.000251151):0.001002853,(((160:0.000232187,(61:0.000170000,(31:0.000133111,1103:0.000133111):0.000036889):0.000062187):0.001063859,(549:0.000937657,1233:0.000937657):0.000358389):0.000846703,((758:0.001028267,(1276:0.000727598,((596:0.000502188,(955:0.000467637,(202:0.000279746,675:0.000279746):0.000187891):0.000034551):0.000134695,(852:0.000632707,901:0.000632707):0.000004176):0.000090715):0.000300669):0.000908723,((555:0.000414225,864:0.000414225):0.000697611,(660:0.000985106,1179:0.000985106):0.000126730):0.000825153):0.000205759):0.000397148):0.000218767):0.000215756):0.001975636,((((843:0.000472426,(904:0.000372035,1145:0.000372035):0.000100390):0.000922888,(645:0.000874733,((744:0.000193640,1173:0.000193640):0.000262131,(373:0.000453806,(385:0.000094808,478:0.000094808):0.000358998):0.000001965):0.000418962):0.000520580):0.001794049,(387:0.002338298,(491:0.001208479,851:0.001208479):0.001129819):0.000851065):0.000911813,(((278:0.000318165,401:0.000318165):0.000999447,((((1067:0.000137123,1136:0.000137123):0.000164145,(34:0.000147102,275:0.000147102):0.000154166):0.000306583,(80:0.000324883,492:0.000324883):0.000282968):0.000648619,((857:0.000317570,1023:0.000317570):0.000938702,(578:0.000681019,(1160:0.000214343,(561:0.000070787,1221:0.000070787):0.000143556):0.000466675):0.000575253):0.000000199):0.000061142):0.002049484,(823:0.003092783,((1112:0.000730077,(213:0.000238461,934:0.000238461):0.000491615):0.001276637,(((657:0.000273439,(977:0.000156692,(312:0.000119406,(194:0.000060406,411:0.000060406):0.000059000):0.000037286):0.000116747):0.000952685,((628:0.000714752,(983:0.000458851,(556:0.000251947,573:0.000251947):0.000206904):0.000255901):0.000382234,(((341:0.000436657,(519:0.000379686,(239:0.000302303,824:0.000302303):0.000077383):0.000056972):0.000405057,((64:0.000021354,1200:0.000021354):0.000747414,(1184:0.000613227,(839:0.000121920,1008:0.000121920):0.000491307):0.000155541):0.000072946):0.000206386,((690:0.000045643,880:0.000045643):0.000961370,((557:0.000242173,610:0.000242173):0.000695114,(339:0.000916729,(396:0.000232632,728:0.000232632):0.000684096):0.000020558):0.000069726):0.000041086):0.000048887):0.000129138):0.000557607,((123:0.000735186,(101:0.000614394,1149:0.000614394):0.000120792):0.001025659,(((87:0.000493685,1060:0.000493685):0.000960250,((293:0.000388235,(384:0.000366295,(1300:0.000291841,(829:0.000281758,1232:0.000281758):0.000010084):0.000074454):0.000021940):0.000474771,(200:0.000734121,1207:0.000734121):0.000128885):0.000590929):0.000064803,(((446:0.000360214,995:0.000360214):0.000199814,(1229:0.000505020,(84:0.000398585,(393:0.000253041,724:0.000253041):0.000145543):0.000106435):0.000055008):0.000957867,(1096:0.001352120,1201:0.001352120):0.000165775):0.000000843):0.000242108):0.000022886):0.000222982):0.001086070):0.000274313):0.000734080):0.000848881):0.003461615):0.002146184):0.004528977):0.086254179,((((592:0.001151802,1282:0.001151802):0.000329296,(((257:0.000145885,727:0.000145885):0.000878418,(522:0.000748557,(147:0.000156578,1277:0.000156578):0.000591979):0.000275745):0.000203879,(215:0.001171052,(1224:0.000892125,(442:0.000236932,1227:0.000236932):0.000655193):0.000278926):0.000057129):0.000252917):0.013277726,((((1090:0.001021684,(((186:0.000489402,834:0.000489402):0.000134678,(653:0.000602018,(495:0.000458513,(754:0.000265374,1038:0.000265374):0.000193139):0.000143505):0.000022061):0.000241932,((575:0.000411091,1202:0.000411091):0.000366507,(1091:0.000444345,(518:0.000441110,819:0.000441110):0.000003235):0.000333253):0.000088414):0.000155673):0.000756369,(((603:0.000416284,(615:0.000174245,1041:0.000174245):0.000242039):0.000788734,(331:0.001142274,(386:0.000415645,456:0.000415645):0.000726630):0.000062744):0.000447210,((279:0.000652188,(92:0.000579713,(1072:0.000098302,(368:0.000068047,631:0.000068047):0.000030255):0.000481411):0.000072475):0.000824112,(709:0.000783157,739:0.000783157):0.000693143):0.000175928):0.000125825):0.002223164,((((889:0.000465889,(284:0.000213148,1172:0.000213148):0.000252741):0.000492493,(1192:0.000953811,((679:0.000273958,(560:0.000008768,909:0.000008768):0.000265191):0.000560248,(783:0.000398106,(300:0.000017312,1265:0.000017312):0.000380793):0.000436101):0.000119605):0.000004571):0.000763522,(1174:0.001550291,((438:0.000161629,842:0.000161629):0.001269935,(((180:0.000232491,285:0.000232491):0.000457891,(760:0.000349039,(608:0.000096292,612:0.000096292):0.000252747):0.000341342):0.000096313,(((619:0.000092463,1252:0.000092463):0.000586996,(381:0.000428949,810:0.000428949):0.000250510):0.000102149,((1110:0.000222178,(785:0.000040935,957:0.000040935):0.000181243):0.000498678,((426:0.000291779,907:0.000291779):0.000399953,((227:0.000364075,344:0.000364075):0.000119740,(324:0.000469408,1168:0.000469408):0.000014407):0.000207916):0.000029124):0.000060752):0.000005086):0.000644870):0.000118727):0.000171613):0.001035196,((158:0.000193038,1092:0.000193038):0.001580702,((1007:0.000747841,1118:0.000747841):0.000781802,((321:0.001403493,(67:0.000426139,319:0.000426139):0.000977353):0.000025802,(1216:0.001414206,((424:0.000291703,912:0.000291703):0.000914037,((888:0.000971939,(609:0.000072350,792:0.000072350):0.000899589):0.000168976,((325:0.000493408,808:0.000493408):0.000617657,(951:0.000645199,(((259:0.000103616,(238:0.000062475,328:0.000062475):0.000041141):0.000173911,(844:0.000146743,1313:0.000146743):0.000130784):0.000190692,(1036:0.000340356,1157:0.000340356):0.000127864):0.000176979):0.000465866):0.000029850):0.000064826):0.000208466):0.000015089):0.000100348):0.000244097):0.000983360):0.001244117):0.000420747,(((248:0.000571213,520:0.000571213):0.000641105,(((420:0.000225064,(672:0.000166465,(643:0.000047164,742:0.000047164):0.000119301):0.000058599):0.000201889,(1098:0.000312416,(748:0.000139263,(394:0.000112536,1083:0.000112536):0.000026727):0.000173153):0.000114537):0.000500562,(576:0.000792552,(356:0.000769594,((432:0.000498302,577:0.000498302):0.000111762,((260:0.000180580,991:0.000180580):0.000357098,(343:0.000416453,961:0.000416453):0.000121225):0.000072385):0.000159530):0.000022959):0.000134963):0.000284802):0.002954630,((208:0.001439100,570:0.001439100):0.001228095,((138:0.000910538,(630:0.000701080,(835:0.000424194,((38:0.000062220,1208:0.000062220):0.000149872,(377:0.000197925,(1088:0.000170861,(410:0.000100114,453:0.000100114):0.000070747):0.000027064):0.000014167):0.000212103):0.000276886):0.000209458):0.001373494,((989:0.001294958,(929:0.001102399,(1322:0.000367727,(873:0.000131318,(65:0.000067691,117:0.000067691):0.000063627):0.000236409):0.000734672):0.000192559):0.000541857,((1264:0.000231024,(16:0.000078214,673:0.000078214):0.000152810):0.001085596,(1127:0.001039317,(((2:0.000211087,932:0.000211087):0.000258608,(828:0.000285068,(398:0.000092679,820:0.000092679):0.000192389):0.000184627):0.000274583,(567:0.000567438,838:0.000567438):0.000176839):0.000295040):0.000277302):0.000520195):0.000447217):0.000383163):0.001499752):0.000255018):0.010336861):0.011802746,((789:0.005370060,((425:0.000905038,((137:0.000364303,(502:0.000186092,1309:0.000186092):0.000178211):0.000238302,(152:0.000548874,436:0.000548874):0.000053731):0.000302433):0.001263865,((826:0.000670746,(124:0.000290810,(58:0.000097106,467:0.000097106):0.000193704):0.000379936):0.000574824,(1210:0.001039855,(757:0.000073574,1074:0.000073574):0.000966281):0.000205714):0.000923333):0.003201157):0.015811402,(((435:0.000405504,1258:0.000405504):0.003554498,(((1198:0.000603236,(902:0.000554510,(536:0.000252223,(966:0.000174599,(793:0.000032035,1034:0.000032035):0.000142564):0.000077624):0.000302287):0.000048726):0.000430985,((327:0.000152096,((281:0.000040372,853:0.000040372):0.000079258,(627:0.000074133,1253:0.000074133):0.000045496):0.000032466):0.000508828,(503:0.000492153,(768:0.000207350,920:0.000207350):0.000284803):0.000168770):0.000373298):0.002076544,(((550:0.000818749,(143:0.000247753,1020:0.000247753):0.000570996):0.000685855,(488:0.000934996,((1009:0.000127988,1297:0.000127988):0.000743073,(862:0.000261364,1075:0.000261364):0.000609697):0.000063935):0.000569607):0.000560060,((987:0.000318866,(884:0.000105140,958:0.000105140):0.000213725):0.001290502,((923:0.000300777,(73:0.000271973,568:0.000271973):0.000028804):0.000353849,(1180:0.000567945,((231:0.000032164,417:0.000032164):0.000504726,(1039:0.000250202,(1320:0.000191986,(280:0.000053026,1288:0.000053026):0.000138960):0.000058216):0.000286688):0.000031055):0.000086680):0.000954741):0.000455297):0.001046101):0.000849237):0.003314910,(((501:0.001279136,((635:0.000087149,780:0.000087149):0.000524554,((1225:0.000048513,1268:0.000048513):0.000262053,(766:0.000131692,821:0.000131692):0.000178874):0.000301137):0.000667433):0.001294500,((1166:0.001009868,(15:0.000968502,(440:0.000557174,1195:0.000557174):0.000411328):0.000041366):0.001297674,((871:0.000773679,((505:0.000415186,(1131:0.000064652,1226:0.000064652):0.000350534):0.000348184,(698:0.000719768,(122:0.000368155,(473:0.000170076,(629:0.000068086,804:0.000068086):0.000101989):0.000198080):0.000351613):0.000043602):0.000010309):0.000866303,(((1094:0.000283964,(17:0.000102155,1042:0.000102155):0.000181809):0.000378417,(150:0.000376700,207:0.000376700):0.000285681):0.000519816,(336:0.000974352,859:0.000974352):0.000207845):0.000457786):0.000667559):0.000266094):0.003357847,((((219:0.000926858,223:0.000926858):0.000233994,(((831:0.000397440,994:0.000397440):0.000430879,(1068:0.000681724,(582:0.000451051,(704:0.000203208,1249:0.000203208):0.000247843):0.000230673):0.000146595):0.000203583,(405:0.000948506,711:0.000948506):0.000083395):0.000128950):0.001282807,((408:0.000312309,493:0.000312309):0.001525153,((1102:0.000403953,(543:0.000257628,723:0.000257628):0.000146325):0.001013316,((980:0.000728433,(956:0.000231913,(878:0.000134539,927:0.000134539):0.000097373):0.000496521):0.000200081,(182:0.000827733,(388:0.000607882,((593:0.000053439,710:0.000053439):0.000462907,(91:0.000321774,(1006:0.000221431,(1194:0.000058112,(397:0.000023263,1165:0.000023263):0.000034849):0.000163319):0.000100343):0.000194572):0.000091536):0.000219850):0.000100782):0.000488755):0.000420193):0.000606196):0.003082426,(((((((585:0.000530198,(176:0.000063377,750:0.000063377):0.000466821):0.000093933,(40:0.000589485,639:0.000589485):0.000034646):0.000454699,(914:0.001038878,1310:0.001038878):0.000039952):0.000130594,(736:0.001176712,1287:0.001176712):0.000032712):0.000458356,((((277:0.000500244,1028:0.000500244):0.000318000,((283:0.000196870,400:0.000196870):0.000579448,(900:0.000249260,1191:0.000249260):0.000527058):0.000041926):0.000272044,(((266:0.000270464,(975:0.000201807,(313:0.000169103,638:0.000169103):0.000032705):0.000068657):0.000534594,(337:0.000803864,(590:0.000097530,996:0.000097530):0.000706334):0.000001193):0.000212633,((241:0.000167099,1301:0.000167099):0.000741582,(296:0.000223296,747:0.000223296):0.000685385):0.000109010):0.000072597):0.000280671,((187:0.000299817,1286:0.000299817):0.000871540,(288:0.000643705,(378:0.000576947,(707:0.000477433,(583:0.000410855,(686:0.000144102,((203:0.000029083,1154:0.000029083):0.000106638,(510:0.000134644,(1236:0.000099528,(1178:0.000065620,(1069:0.000005124,1186:0.000005124):0.000060496):0.000033908):0.000035116):0.000001077):0.000008381):0.000266752):0.000066578):0.000099514):0.000066758):0.000527652):0.000199602):0.000296821):0.000965246,((((13:0.000635624,962:0.000635624):0.000537047,((355:0.000100576,799:0.000100576):0.000933536,(1242:0.000552732,(795:0.000522451,1051:0.000522451):0.000030281):0.000481380):0.000138559):0.000524797,((634:0.000499226,(959:0.000388469,(911:0.000091487,1164:0.000091487):0.000296982):0.000110756):0.000981963,(1015:0.000650184,((1125:0.000186159,(579:0.000031867,713:0.000031867):0.000154292):0.000461708,(413:0.000268797,674:0.000268797):0.000379070):0.000002317):0.000831004):0.000216279):0.000266743,(1025:0.001830213,((11:0.000549065,1057:0.000549065):0.001067338,((814:0.000474694,(133:0.000185197,(700:0.000047261,965:0.000047261):0.000137936):0.000289497):0.000565306,((985:0.000351000,(9:0.000268540,226:0.000268540):0.000082460):0.000215934,(589:0.000404742,(617:0.000340400,(97:0.000160433,140:0.000160433):0.000179967):0.000064342):0.000162193):0.000473065):0.000576403):0.000213811):0.000133997):0.000668816):0.002684293,((14:0.000120109,(517:0.000069464,1123:0.000069464):0.000050646):0.002736314,(((1190:0.000659130,(512:0.000215103,1290:0.000215103):0.000444027):0.000536645,((395:0.000126135,(329:0.000109830,528:0.000109830):0.000016305):0.000952527,((243:0.000501023,1032:0.000501023):0.000398148,((198:0.000025410,412:0.000025410):0.000861628,(1238:0.000218039,(326:0.000038643,1021:0.000038643):0.000179396):0.000668999):0.000012133):0.000179490):0.000117113):0.000508286,((250:0.000427877,482:0.000427877):0.001160920,((1097:0.000245039,1185:0.000245039):0.001070849,(526:0.000847479,(1312:0.000244290,(1043:0.000047297,1084:0.000047297):0.000196993):0.000603189):0.000468410):0.000272908):0.000115264):0.001152363):0.002460895):0.000208765):0.000405400):0.001343430):0.013906550):0.005380109):0.074779443):0.030385695);
# ((4:0.004820685,5:0.004820685):0.174408078,((2:0.001849208,6:0.001849208):0.014321247,(1:0.014174267,3:0.014174267):0.001996188):0.163058311);

# BELOW INCLUDES ANCESTRAL NODES after the closing ')'; not typical
# ((((((Hsap_22_20193454_20221225[-]:0.006609454545459997,(Ppan_22_18624951_18652828[-]:0.0030724324324299945,Ptro_22_6782970_6810987[-]:0.002467567567569995)Aseq_Ancestor_1134_143928_1_27832[+]:0.004300545454549998)Aseq_Ancestor_1134_143927_1_27768[+]:0.001756882402000004,Ggor_22_3463298_3492802[-]:0.008676269113150004)Aseq_Ancestor_1134_143926_1_27643[+]:0.00836254427880001,Pabe_22_16080744_16109032[-]:0.017263090277800014)Aseq_Ancestor_1134_143925_1_27616[+]:0.002826489680689992,Nleu_7b_50056670_50084885[+]:0.01961136448600001)Aseq_Ancestor_1134_143924_1_26980[+]:0.0107798976298,(Csab_19_5517847_5546107[+]:0.011697146226400001,((Mfas_10_31213946_31241637[+]:0.0021518018017999962,Mmul_10_61937435_61965036[-]:0.0023281981981999877)Aseq_Ancestor_1134_143923_1_27511[+]:0.005272837817426018,Panu_10_61760152_61787913[-]:0.007850323798739983)Aseq_Ancestor_1134_143922_1_27496[+]:0.004010075995809992)Aseq_Ancestor_1134_143921_1_27433[+]:0.018632143751830005)Aseq_Ancestor_1134_143920_1_26306[+]:0.017601338894999985,Cjac_NTIC01000001.1_1181545_1208937[+]:0.05366348520229999)Aseq_Ancestor_1134_143919_1_24624[+]:0.028514765765095013;

# Work through:
# EXAMPLE 1: 6 leaves
# STEP 1:
# ((4:0.004820685,5:0.004820685):0.174408078,((2:0.001849208,6:0.001849208):0.014321247,(1:0.014174267,3:0.014174267):0.001996188):0.163058311);
# 	TREE_STRIPPED: (4:0.004820685,5:0.004820685):0.174408078,((2:0.001849208,6:0.001849208):0.014321247,(1:0.014174267,3:0.014174267):0.001996188)
#	TREE 1: (4:0.004820685,5:0.004820685):0.174408078
#	TREE 2: ((2:0.001849208,6:0.001849208):0.014321247,(1:0.014174267,3:0.014174267):0.001996188):0.163058311
# 
# So I think we (1) strip the outermost parentheses; (2) find the two biggest subtrees, 
#	separated by a central ','; (3) save that starting point, which might automatically
#	happen anyway when using recursion; and (4) continue evolving/splitting, arbitrarily
#	processing the first of the subtrees first, then the second when returning.
#
# EXAMPLE 2: 8 leaves
# (3:0.294689924,(((6:0.003622241,7:0.003622241):0.000887494,(1:0.004103188,8:0.004103188):0.000406547):0.043354616,(2:0.028538693,(4:0.012356070,5:0.012356070):0.016182624):0.019325659):0.246825576);

my %tree;

# ANALYTICALLY EXPECTED:
# With slim example matrix 2, expect (3e-7) * (100000-2) * 4399 = 131.9674 mutations per run.

# TRIALS USING EXPONENTIAL WAITING TIMES:
# trial1: 150 muts, 9 secs
# t2: 112, 7
# t3: 112, 7
# t4: 131, 8
# t5: 132, 8
# t6: 144, 9
# t7: 138, 9
# t8: 127, 8
# t9: 133, 8
# t10: 130, 8
# t11: 126, 8
# t12: 118, 7
# t13: 125, 9
# t14: 116, 8
# t15: 139
# t16: 128
# t17: 133
# t18: 143
# t19: 133
# t20: 123
# t21: 142
# t22: 136
# t23: 144
# t24: 133
# t25: 144
# t26: 127
# t27: 149
# t28: 117
# t29: 140
# t30: 133

# NO SIGNIFICANT MUTATION DIFFERENCE between theoretical expectation of 131.9674 and 
# observed mean of 131.9333 (wow). Mutation is working as expected.
# (P = 0.9858, t-test; P = 0.8369, wilcoxon)
# R code:
# t.test(x = c(150, 112, 112, 131, 132, 144, 138, 127, 133, 130, 126, 118, 125, 116, 139, 128, 133, 143, 133, 123, 142, 136, 144, 133, 144, 127, 149, 117, 140, 133), mu = 131.9674)

my $num_mutations = 0;
#my $generations_elapsed = 0;
my $total_branch_length = 0;
my $branch_to_tip_length = 0;
#my %mutation_history; # mutations will be comma(',')-separated as <GEN><AA><SITE><DA>
my %taxa_histories;
my %generational_histories;
my $node_id = 1;

print "\nANCESTRAL SEQUENCE: $seed_seq\n";

print "\nTREE: $tree\n";

##########################################################################################
# THE SIMULATION: recursive evolution approach using the subroutine &evolve_two_subtrees()
##########################################################################################
evolve_two_subtrees($tree, 0, 'n1=root,');


##########################################################################################
# PRINT RESULTS
##########################################################################################

print "\n\n#########################################################################################\n";
print "# SUMMARY OF RESULTS:\n";
print "#########################################################################################\n";

print "\ntotal number of mutations on all branches: $num_mutations\n";
print "\ntotal branch length (generations): $total_branch_length\n";
print "\nbranch-to-tip length (generations): $branch_to_tip_length\n";
print "\ntotal number of mutations occurred: $num_mutations\n";
print "\nlength of run in seconds: " . (time - $time1) . "\n\n";

print "\n#########################################################################################\n";
print "# RESULTS:\n";
print "#########################################################################################\n";

print "\n//MUTATION\n";

print "taxon\tsite\tmutations\n";
foreach my $taxon (sort {$a <=> $b} keys %taxa_histories) {
	foreach my $mutated_site (sort {$a <=> $b} keys %{$taxa_histories{$taxon}}) {
		print "$taxon\t$mutated_site\t" . $taxa_histories{$taxon}->{$mutated_site} . "\n";
	}
}

if($track_rate || $tracked_motif) {
	print "\n//TRACKED\n";

	my $out_line = "lineage\tgeneration\t";
	
	if ($track_rate) { $out_line .= "rate\t" }
	if ($tracked_motif) { $out_line .= "motif\t" }
	chop($out_line);
	print "$out_line\n";
	$out_line = '';
	
	
	foreach my $these_nodes (sort keys %generational_histories) {
		foreach my $generations_elapsed (sort {$a <=> $b} keys %{$generational_histories{$these_nodes}}) {
			$out_line .= "$these_nodes";
			chop($out_line);
			$out_line .= "\t$generations_elapsed\t";
			
			if ($generational_histories{$these_nodes}->{$generations_elapsed}->{rate}) {
				$out_line .= $generational_histories{$these_nodes}->{$generations_elapsed}->{rate} . "\t";
			}
			
			foreach my $motif (sort keys %{$generational_histories{$these_nodes}->{$generations_elapsed}}) {
				if ($motif ne 'rate' && $motif ne 'nodes' && $motif ne '') {
					$out_line .= $generational_histories{$these_nodes}->{$generations_elapsed}->{$motif} . ",";
				}
			}
			
			chop($out_line);
			print "$out_line\n";
			$out_line = '';
			
		}
	}
}

exit;


##########################################################################################
##########################################################################################
### SUBROUTINE: recursive evolution approach
##########################################################################################
##########################################################################################
sub evolve_two_subtrees {
	
	my($tree, $generations_elapsed, $nodes, $mutation_history_ref) = @_;
	print "We got the arguments: @_\n";
	
	my %mutation_history;
	
	if($mutation_history_ref ne '') {
		print "got here\n";
		# It's SUPPOSEDLY possible to use map to do this, but not straightforward.
		# The module::function Storable::dclone can do this, but I don't want dependencies.
		# So we DO IT OURSELVES.
		%mutation_history = %{$mutation_history_ref};
#		my %mutation_history_linked = %{$mutation_history_ref};
#		
#		foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history_linked) {
#			my $this_mutation_history = $mutation_history_linked{$mutated_site};
#			$mutation_history{$mutated_site} = $this_mutation_history;
#		}
	}
	
	if ($verbose) {
		print "\n##########################################################################################\n";
		print "Analyzing node $node_id\nGenerations elapsed: " . sprintf("%.3f", $generations_elapsed) . "\n";
		print "tree: $tree\n";
	}

# MOVED THIS TO A SMALLER SCOPE	
#	# Construct the current state of the sequence given the evolutionary history
#	# Perhaps not quite as time-efficient, but MUCH MORE MEMORY EFFICIENT.
#	my $curr_sequence = $seed_seq;
#	foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history) {
#		my $latest_nt = $mutation_history{$mutated_site};
#		chop($latest_nt); # remove ending comma (,)
#		$latest_nt = chop($latest_nt); # return new end, which is latest nucleotide
#		
#		substr($curr_sequence, $mutated_site - 1, 1, $latest_nt);
#	}
	
#	print "\n";
#	print "$mutation_history\n";
#	print "$curr_sequence\n";
	
	# IF WE HAVE MORE THAN ONE TAXON LEFT, WE'LL HAVE A COMMA (,)
	if ($tree =~ /\,/) {
		my $tree_stripped = $tree;
		
		if(substr($tree_stripped, 0, 1) eq '(' && substr($tree_stripped, -1) eq ')') { # first and last are parentheses
			$tree_stripped =~ s/^\(//; # remove first opening parentheses
			$tree_stripped =~ s/\)$//; # remove last closing parentheses
		}
		
		if ($verbose) { print "tree_stripped: $tree_stripped\n" }
		
		#my $pattern = 0;
		
		# NOW SIX BASIC PATTERN POSSIBILITIES:
		# (1) (-----):0.01					<-- here, first matching closing parentheses coincides with branch length
		# (2) (-----):0.01,(-----):0.01			<-- sub-case of #1 in which more follows, enclosed ()
		# (3) (-----):0.01,A:0.01				<-- sub-case of #1 in which more follows, naked
		# (4) A:0.01,(-----):0.01			<-- here, first opening parentheses happens later (keep track); in what follows matched closing, there's more enclosed
		# (5) A:0.01,B:0.01					<-- here, no parentheses
		# (6) A:0.01						<-- here, terminal taxon
		
		my $comma_count = ($tree_stripped =~ s/,/,/g);
		
		# These two categories are mutually exclusive. Easy to test later.
		my $internal_node = ''; # category 1
		my $branch_length = ''; # category 1
		my $subtree1 = ''; # category 2
		my $subtree2 = ''; # category 2
		
		# ONE COMMA
		if ($comma_count == 1) {
			#die "\none comma\n";
			# TWO POSSIBILITIES:
			# (1) (-----):0.01
			# (5) A:0.01,B:0.01				<-- here, no parentheses
			
			# COULD BE:
			#tree: (3:0.019601732,5:0.019601732):0.060524836
			#tree_stripped: (3:0.019601732,5:0.019601732):0.060524836
			#subtree1: (3:0.019601732
			#subtree2: 5:0.019601732):0.060524836
			
			##############################################################################
			### PATTERN (1) (-----):0.01. Ancestral branch underlying internal node. EVOLVE IT!
			##############################################################################
		
			# one opening parentheses
			if(($tree_stripped =~ s/\(/\(/g) == 1) {
				# pattern 1 with a SINGLE internal pair
				# (1) (-----):0.01
				
				if ($verbose) { print "pattern 1a: (A:0.01,B:0.01):0.01\n" }
				
				#$pattern = 1;
				
				if($tree_stripped =~ /^(\(.+\)):([0-9\.eE\-]+)$/) {
					# EXAMPLE: ((303:0.000054266,1177:0.000054266):0.000224311,(163:0.000054489,498:0.000054489):0.000224088):0.000134308
					
					$internal_node = $1;
					$branch_length = $2;
					
				}
			
			##################################################################################
			### PATTERN (5) A:0.01,B:0.01
			##################################################################################
		
			# no opening parentheses
			} elsif (($tree_stripped =~ s/\(/\(/g) == 0) {
				# pattern 5 with a single naked pair
				# (5) A:0.01,B:0.01
				
				if ($verbose) { print "pattern 5: A:0.01,B:0.01\n" }
				
				#$pattern = 5;
				
				if($tree_stripped =~ /^(.+:[0-9\.eE\-]+),(.+:[0-9\.eE\-]+)$/) {
					# EXAMPLE: 
					
					# SUBMIT THE TWO TERMINAL BRANCHES AND RETURN FROM SUBROUTINE
					
					$subtree1 = $1;
					$subtree2 = $2;
					
					($subtree1, $subtree2) = sort($subtree1, $subtree2);
					
					if ($verbose) { print "subtree1: $subtree1\nsubtree2: $subtree2\n" }
					
					# Recursively evolve subtrees
					my %mutation_history_copy = %mutation_history;
					
					if ($verbose) { print "Analyzing subtree1...\n" }
					evolve_two_subtrees($subtree1, $generations_elapsed, $nodes, \%mutation_history);
					
					if ($verbose) { print "Analyzing subtree2...\n" }
					evolve_two_subtrees($subtree2, $generations_elapsed, $nodes, \%mutation_history_copy);
					
					return;
				}
				
			} else {
				die "\n### TERMINATED: Only one comma in tree but more than one opening parentheses. Format unexpected.\n";
			}
		
		# MORE THAN ONE COMMA
		} elsif ($comma_count > 1) {
			# FOUR POSSIBILITIES:
			# (1) (-----):0.01					<-- here, first matching closing parentheses coincides with branch length
			# (2) (-----):0.01,(-----):0.01			<-- sub-case of #1 in which more follows, enclosed ()
			# (3) (-----):0.01,A:0.01				<-- sub-case of #1 in which more follows, naked
			# (4) A:0.01,(-----):0.01			<-- here, first opening parentheses happens later (keep track); in what follows matched closing, there's more enclosed
			
			# PROCESS THE TREE BY MATCHING PARENTHESES TO IDENTIFY WHICH PATTERN HOLDS
			# This should work: split the tree in half at the first point that the number of 
			# close parentheses ')' is equal to the number of opening parentheses '('. Trees 
			# aren't really rate-limiting, so don't have to be smart or efficient (of which I'm
			# neither, by nature).
			
			my $opening_count = 0;
			my $closing_count = 0;
			my $split_index = 0;
			
			my $first_paren_index = undef;
			
			# IDENTIFY TWO SUBTREES; BUT COULD ALSO BE A SINGLE NODE, TOO (EXAMINE SUBTREE2)
			IDENTIFY_SUBTREES: for (my $tree_index = 0; $tree_index < length($tree_stripped); $tree_index++) {
				# count an opening
				if (substr($tree_stripped, $tree_index, 1) eq '(') {
					$opening_count++;
					
					unless(defined($first_paren_index)) {
						$first_paren_index = $tree_index;
					}
				
				# count a closing
				} elsif (substr($tree_stripped, $tree_index, 1) eq ')') {
					$closing_count++;
				}
				
				# detect if matched parentheses pair has been reached
				if ($opening_count > 0 && $opening_count == $closing_count) {
					$split_index = $tree_index;
					
					#print "opening_count=$opening_count\nclosing_count=$closing_count\nsplit_index=$split_index\n";
					
					# walk ahead to capture only the following branch length
					my $new_char = '';
					while ($split_index < length($tree_stripped) && $new_char ne ',' && $new_char ne '(' && $new_char ne ')') {
						$split_index++;
						$new_char = substr($tree_stripped, $split_index, 1);
						#print "new_char=$new_char\n";
					}
					
					$split_index--;
					
					if($verbose) { print "FINAL string index at which to split tree: $split_index\n" }
					last IDENTIFY_SUBTREES;
				}
			}
			
			# store detected subtrees, skipping the trailing comma at $split_index + 1
			my $tree_portion1;
			my $tree_portion2;
			
			if ($first_paren_index == 0) {
				$tree_portion1 = substr($tree_stripped, 0, $split_index + 1);
				$tree_portion2 = substr($tree_stripped, $split_index + 2);
			} else { # the first parentheses MUST be preceded by a comma
				$tree_portion1 = substr($tree_stripped, 0, $first_paren_index - 1);
				$tree_portion2 = substr($tree_stripped, $first_paren_index);
			}
			
			#print "tree_portion1=$tree_portion1\ntree_portion2=$tree_portion2\n";
					
			# check whether it's two subtrees or one internal branch
			if (length($tree_portion2) > 0) { # two subtrees
				($subtree1, $subtree2) = ($tree_portion1, $tree_portion2);
			} elsif ($tree_portion1 =~ /^(.+):([0-9\.eE\-]+)$/) { 
				($internal_node, $branch_length) = ($1, $2);
			} else {
				die "### TERMINATED: tree contains neither two subtrees nor a single internal node.\n";
			}
		
		# NO COMMA
		} elsif ($comma_count == 0) {
			# ONLY ONE POSSIBILITY: A TERMINAL TAXON
			die "\n### WARNING: No comma but a comma? TERMINATED.\n\n";
		} else {
			die "\n### WARNING: Number of commas not qunatifiable; TERMINATED.\n\n";
		}
		
		# print "subtree1: $subtree1\nsubtree2: $subtree2\n";
		
		# NOW REMIND THE SIX BASIC PATTERN POSSIBILITIES:
		# (1) (-----):0.01					<-- here, first matching closing parentheses coincides with branch length
		# (2) (-----):0.01,(-----):0.01			<-- sub-case of #1 in which more follows, enclosed ()
		# (3) (-----):0.01,A:0.01				<-- sub-case of #1 in which more follows, naked
		# (4) A:0.01,(-----):0.01			<-- here, first opening parentheses happens later (keep track); in what follows matched closing, there's more enclosed
		# (5) A:0.01,B:0.01					<-- here, no parentheses
		# (6) A:0.01						<-- here, terminal taxon
		
		##################################################################################
		### PATTERN (1) (-----):0.01. Ancestral branch underlying internal node. EVOLVE IT!
		##################################################################################
		if (length($subtree1) == 0 && length($subtree2) == 0 && length($internal_node) > 1 && length($branch_length) > 1) {
			
			$node_id++;
			$nodes .= "n$node_id\,";
			
			# Construct the current state of the sequence given the evolutionary history
			# Perhaps not quite as time-efficient, but MUCH MORE MEMORY EFFICIENT.
			my $curr_sequence = $seed_seq;
			print "seed=$seed_seq\n";
			foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history) {
				my $latest_nt = $mutation_history{$mutated_site};
				chop($latest_nt); # remove ending comma (,)
				$latest_nt = chop($latest_nt); # return new end, which is latest nucleotide
#				print "latest_nt=$latest_nt\n";
				substr($curr_sequence, $mutated_site - 1, 1, $latest_nt);
			}
			print "curr=$curr_sequence\n";
			
			# Calculate number of generations on the branch
			my $generations = $branch_length * $branch_unit;
			$total_branch_length += $generations;
			#$generations = $generations;
			if($verbose) { print "pattern 1: (-----):0.01\ngenerations to evolve on ancestral branch: " . sprintf("%.3f", $generations) . "\n" }
			
			# Tally all trinucleotides in sequence; first and last nucleotides ignored.
			my %trint_counts;
			my $trint_counts_sum = 0;
			for (my $seq_index = 0; ($seq_index + 2) < length($curr_sequence); $seq_index++) {
				$trint_counts{substr($curr_sequence, $seq_index, 3)}++;
				$trint_counts_sum++;
			}
			
			print "trinucleotide counts, summing to $trint_counts_sum\:\n";
			foreach (sort keys %trint_counts) {
				print "$_\=" . $trint_counts{$_} . "\n";
			}
			
			# Calculate weighted mean mutation rate per generation.
			my $mut_rate_overall = 0;
			foreach (keys %trint_counts) {
				my $rate_row_sum = $rate_matrix{$_}->{'A'} + $rate_matrix{$_}->{'C'} + 
										$rate_matrix{$_}->{'G'} + $rate_matrix{$_}->{'T'};
				
				$mut_rate_overall += ($trint_counts{$_} * $rate_row_sum);
			}
			
			# Here's the issue: EACH "generations elapsed" is UNIQUE, so of course we'll only store one value per.
			if ($verbose) { print "starting mutation rate: $mut_rate_overall\n" }
#			if($generations_elapsed == 0 && ($track_rate || $tracked_motif)) {
#				$generational_histories{$generations_elapsed}->{nodes} .= "$node_id\,";
#			}
			if ($generations_elapsed == 0 && $track_rate) {
				$generational_histories{$nodes}->{$generations_elapsed}->{rate} = $mut_rate_overall;
			}
			if ($generations_elapsed == 0 && $tracked_motif) {
				my @motifs_overlapping = ($curr_sequence =~ /(?=$tracked_motif)/g); # ?= means overlapping matches
				$generational_histories{$nodes}->{$generations_elapsed}->{$tracked_motif} = scalar(@motifs_overlapping);
			}
			
	#		print "mut_rate_mean=$mut_rate_mean\n";
			# when all rates were 1e-7 (file SLiM_example_rate2.txt), this was 
			#mut_rate_overall=0.0299994
			#mut_rate_mean=3e-07. Is that what we expect?
			# each row sums to 3e-7.
			# expect (3e-7) * 100000 * 4399 = 131.97 mutations per run.
			# expect (3e-7) * 99998 = 0.0299994 mutations per generation.
			# CONFIRMED ALL AROUND.
			
			# Generate random exponential waiting time to next mutation
			my $rand_number = rand();
			my $waiting_time = -(1 / $mut_rate_overall) * log($rand_number);
	#		print "waiting_time=$waiting_time\n";
			
			while ($waiting_time < $generations) { # a new mutation!
				$num_mutations++;
				
				# which site and nucleotide change?
				my $rand_number2 = rand($mut_rate_overall);
				
				my $curr_rate_max = 0;
				my $mutation_complete = 0;
				
				my $mutation_site_index;
				my $trint_AA = '';
				my $trint_DA = '';
				my $prev_trint_AA = '';
				my $prev_trint_DA = '';
				my $next_trint_AA = '';
				my $next_trint_DA = '';
				my $nt_AA = '';
				my $nt_DA = '';
				
				DETERMINE_MUTATION: for (my $seq_index = 0; ($seq_index + 2) < length($curr_sequence); $seq_index++) {
					my $trint = substr($curr_sequence, $seq_index, 3);
					
					foreach my $nt (qw/A C G T/) {
						#print "nt=$nt\n";
						my $this_rate = $rate_matrix{$trint}->{$nt};
						$curr_rate_max += $this_rate;
						
						if ($rand_number2 < $curr_rate_max && $this_rate > 0) { # this one was it!
							
							$mutation_site_index = $seq_index + 1;
							
							print "MUTATION at generation " . ($generations_elapsed + $waiting_time) . "! $trint" . ($mutation_site_index + 1);
							
							# Prev and next overlapping trinucleotides
							
							# don't look at prev trint for FIRST trint
							unless($seq_index == 0) {
								$prev_trint_AA = substr($curr_sequence, $seq_index - 1, 3);
								$prev_trint_DA = $prev_trint_AA;
								substr($prev_trint_DA, 2, 1, $nt);
							}
							
							# don't look at next trint for LAST trint
							unless(($seq_index + 3) >= length($curr_sequence)) {
								$next_trint_AA = substr($curr_sequence, $seq_index + 1, 3);
								$next_trint_DA = $next_trint_AA;
								substr($next_trint_DA, 0, 1, $nt);
							}
							
							$trint_AA = $trint;
							$nt_AA = substr($trint, 1, 1, $nt); # returns what was there before replacement
							
							print "$trint";
							$trint_DA = $trint;
							$nt_DA = $nt;
							
							# change state of actual sequence
							substr($curr_sequence, $mutation_site_index, 1, $nt);
							
							$mutation_complete = 1;
							last DETERMINE_MUTATION;
						}
					}
				}
				
				# For that EXTREMELY RARE case where it's the last site, last nucleotide (T)
				#my $trint = substr($curr_sequence, length($curr_sequence) - 3, 3);
				#print "VERY LAST TRINT!! $trint\n";
				unless($mutation_complete == 1) { # very last site, nucleotide T
					my $trint = substr($curr_sequence, length($curr_sequence) - 3, 3);
					
					$mutation_site_index = (length($curr_sequence) - 2);
					
					print "MUTATION at generation " . ($generations_elapsed + $waiting_time) . "! $trint" . ($mutation_site_index + 1);
					
					# Prev and next overlapping trinucleotides
					
					# don't look at prev trint for FIRST trint
					unless(length($curr_sequence) == 3) {
						$prev_trint_AA = substr($curr_sequence, (length($curr_sequence) - 4), 3);
						$prev_trint_DA = $prev_trint_AA;
						substr($prev_trint_DA, 2, 1, 'T');
					}
					
					$trint_AA = $trint;
					$nt_AA = substr($trint, 1, 1, 'T'); # returns what was there before replacement
					
					#substr($trint, 1, 1, 'T'); redundant
					print "$trint";
					$trint_DA = $trint;
					$nt_DA = 'T';
					
					# NO NEXT TRINUCLEOTIDE!
					
					# change state of actual sequence
					substr($curr_sequence, $mutation_site_index, 1, 'T'); # DOUBLE CHECK THAT COMEBACK
					$mutation_complete = 1;
				}
				
				# UPDATE the number of generations REMAINING on the branch
				$generations = $generations - $waiting_time;
				$generations_elapsed += $waiting_time;
				
				# UPDATE mutation history
				#$mutation_history{$mutation_site_index + 1} .= int($generations_elapsed + 1) . "\-$trint_AA\-$trint_DA\,";
				$mutation_history{($mutation_site_index + 1)} .= int($generations_elapsed + 1) . "\-$nt_AA\>$nt_DA\,";
				
				# UPDATE number of trinucleotides in sequence, taking advantage of 1 mutation 
				# at a time. One nucleotide change will affect 3 overlapping trinucleotides.
				# Sum (number of trints, 2 less the number of sites) will remain the same. 
				# Also update the overall mutation rate.
				
				# SUBTRACT obliterated (ancestral) trinucleotide values
				if($prev_trint_AA ne '') {
					$trint_counts{$prev_trint_AA}--;
					my $rate_row_sum_prev_trint_AA = $rate_matrix{$prev_trint_AA}->{'A'} + $rate_matrix{$prev_trint_AA}->{'C'} + 
												$rate_matrix{$prev_trint_AA}->{'G'} + $rate_matrix{$prev_trint_AA}->{'T'};
					$mut_rate_overall -= $rate_row_sum_prev_trint_AA; # implicitly, * 1
				}
				
				$trint_counts{$trint_AA}--;
				my $rate_row_sum_AA = $rate_matrix{$trint_AA}->{'A'} + $rate_matrix{$trint_AA}->{'C'} + 
											$rate_matrix{$trint_AA}->{'G'} + $rate_matrix{$trint_AA}->{'T'};
				$mut_rate_overall -= $rate_row_sum_AA;
				
				if($next_trint_AA ne '') {
				#if ($mutation_site_index < (length($curr_sequence) - 2)) { # if not LAST trinucleotide
					$trint_counts{$next_trint_AA}--;
					my $rate_row_sum_next_trint_AA = $rate_matrix{$next_trint_AA}->{'A'} + $rate_matrix{$next_trint_AA}->{'C'} + 
												$rate_matrix{$next_trint_AA}->{'G'} + $rate_matrix{$next_trint_AA}->{'T'};
					$mut_rate_overall -= $rate_row_sum_next_trint_AA;
				}
				
				# ADD spontaneously generated (derived) trinucleotide values
				if($prev_trint_DA ne '') {
					$trint_counts{$prev_trint_DA}++;
					my $rate_row_sum_prev_trint_DA = $rate_matrix{$prev_trint_DA}->{'A'} + $rate_matrix{$prev_trint_DA}->{'C'} + 
												$rate_matrix{$prev_trint_DA}->{'G'} + $rate_matrix{$prev_trint_DA}->{'T'};
					$mut_rate_overall += $rate_row_sum_prev_trint_DA;
				}
				
				$trint_counts{$trint_DA}++;
				my $rate_row_sum_DA = $rate_matrix{$trint_DA}->{'A'} + $rate_matrix{$trint_DA}->{'C'} + 
											$rate_matrix{$trint_DA}->{'G'} + $rate_matrix{$trint_DA}->{'T'};
				$mut_rate_overall += $rate_row_sum_DA; # for example, if CpG created, may be higher
				
				if($next_trint_DA ne '') {
				#if ($mutation_site_index < (length($curr_sequence) - 2)) { # if not LAST trinucleotide
					$trint_counts{$next_trint_DA}++;
					my $rate_row_sum_next_trint_DA = $rate_matrix{$next_trint_DA}->{'A'} + $rate_matrix{$next_trint_DA}->{'C'} + 
												$rate_matrix{$next_trint_DA}->{'G'} + $rate_matrix{$next_trint_DA}->{'T'};
					$mut_rate_overall += $rate_row_sum_next_trint_DA;
				}
				
				print "; new mutation rate: $mut_rate_overall\n";
				
#				if ($track_rate || $tracked_motif) { 
#					$generational_histories{$generations_elapsed}->{nodes} .= "$node_id\,";
#				}
				if ($track_rate) { 
					$generational_histories{$nodes}->{$generations_elapsed}->{rate} = $mut_rate_overall;
				}
				if ($tracked_motif) { # COMEBACK that regex work?
					my @motifs_overlapping = ($curr_sequence =~ /(?=$tracked_motif)/g); # ?= means overlapping matches
					$generational_histories{$nodes}->{$generations_elapsed}->{$tracked_motif} = scalar(@motifs_overlapping);
				}
				
	#			$final_mutation_rate = $mut_rate_overall;
				
	#			print "generations_elapsed=$generations_elapsed\n";
	#			print "remaining on branch, generations=$generations\n";
	#			print "mutation_history:\n";
	#			
	#			foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history) {
	#				print "$mutated_site:" . $mutation_history{$mutated_site} . "\n";
	#			}
	#			
	#			print "mut_rate_overall=$mut_rate_overall\n";
	#			print "\n";
				
	#			print "updated trinucleotide counts\:\n";
	#			foreach (sort keys %trint_counts) {
	#				print "$_\=" . $trint_counts{$_} . "\n";
	#			}
				
	#			print "mut_rate_overall=$mut_rate_overall\n";
				
				# New waiting time
				$rand_number = rand();
				$waiting_time = -(1 / $mut_rate_overall) * log($rand_number);
				#print "waiting_time=$waiting_time\n";
			} # finish a new mutation
			
			# Add the remaining time in which mutation DIDN'T occur.
			$generations_elapsed += $generations;
			
			if($verbose) { print "evolution of node complete; generations_elapsed: " . sprintf("%.3f", $generations_elapsed) . "\n" }
##			print "mutation_history:\n";
##			
##			foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history) {
##				print "$mutated_site:" . $mutation_history{$mutated_site} . "\n";
##			}
#			
#		#	print "new sequence:\n";
#		#	print "$curr_sequence\n";
#		##	print "mut_rate_overall=$final_mutation_rate\n"; # wasn't final because wasn't updated since last mutation
#		#	print "\n";
			
			if($verbose) { print "now submitting internal node for evolution:\ninternal_node: $internal_node\n" }
			
			# Recursively evolve subtrees
			#my %mutation_history_copy = %mutation_history;
			
			if($verbose) { print "Analyzing internal_node...\n" }
			evolve_two_subtrees($internal_node, $generations_elapsed, $nodes, \%mutation_history);
			
		##################################################################################
		### SUBTREE PATTERN
		##################################################################################
		} elsif (length($subtree1) > 1 && length($subtree2) > 1 && length($internal_node) == 0 && length($branch_length) == 0) { # CONTAINS PARENTHESES
		#} elsif ($tree_stripped =~ /(^\(.+\):[0-9\.eE\-]+),(\(.+\):[0-9\.eE\-]+$)/) { # NOT TESTED
			if($verbose) { print "pattern 2: (-----):0.01,(-----):0.01\n" }
			#die "pattern 2\n";
			
			
			# FALSELY GETTING HERE FOR THIS:
			##########################################################################################
#Generations elapsed: 0
#tree: (6:0.013201605,((1:0.003235222,4:0.003235222):0.009367201,(2:0.004524757,7:0.004524757):0.008077667):0.000599180):0.066924967
#tree_stripped: (6:0.013201605,((1:0.003235222,4:0.003235222):0.009367201,(2:0.004524757,7:0.004524757):0.008077667):0.000599180):0.066924967
#pattern 2: (-----):0.01,(-----):0.01
#subtree1: ((1:0.003235222,4:0.003235222):0.009367201,(2:0.004524757,7:0.004524757):0.008077667):0.000599180):0.066924967
#subtree2: (6:0.013201605
#Analyzing subtree1...
			
			
			($subtree1, $subtree2) = sort($subtree1, $subtree2);
			
			if($verbose) { print "subtree1: $subtree1\nsubtree2: $subtree2\n" }
			
			# Recursively evolve subtrees
			my %mutation_history_copy = %mutation_history;
			
			if($verbose) { print "Analyzing subtree1...\n" }
			evolve_two_subtrees($subtree1, $generations_elapsed, $nodes, \%mutation_history);
			
			if($verbose) { print "Analyzing subtree2...\n" }
			evolve_two_subtrees($subtree2, $generations_elapsed, $nodes, \%mutation_history_copy);
		
		##################################################################################
		## NO RECOGNIZABLE PATTERN: ABORT!
		##################################################################################
		} else {
			print "$tree_stripped\n";
			die "### TERMINATED: TREE ABOVE DIDN'T MATCH ANY EXPECTED TREEE FORMAT.\n\n";
		}
		
	} else { # BASE CASE: A SINGLE TAXON (NO COMMA). EVOLVE IT AND STORE ITS MUTATION HISTORY.
#		die "Might we have a wen ti? #2.\n";
		#return $mutation_history;
		#%taxa_histories
		
		$node_id++;
		$nodes .= "n$node_id\,";
		
		# Construct the current state of the sequence given the evolutionary history
		# Perhaps not quite as time-efficient, but MUCH MORE MEMORY EFFICIENT.
		my $curr_sequence = $seed_seq;
		print "seed=$seed_seq\n";
		foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history) {
			my $latest_nt = $mutation_history{$mutated_site};
			chop($latest_nt); # remove ending comma (,)
			$latest_nt = chop($latest_nt); # return new end, which is latest nucleotide
#			print "latest_nt=$latest_nt\n";
			substr($curr_sequence, $mutated_site - 1, 1, $latest_nt);
		}
		print "curr=$curr_sequence\n";
		
		my $taxon;
		my $branch_length;
		
		if ($tree =~ /^(.+)\:(.+)$/) {
			$taxon = $1;
			$branch_length = $2;
		} else {
			die "Might we have a wen ti? #3.\n";
		}
		
		chop($nodes);
		$nodes .= "=$taxon\,";
		
#		die "Might we have a wen ti? #4.\n";
		
		if($verbose) { print "ANALYZING A TERMINAL TAXON: $taxon\n" }
		
		# Calculate number of generations on the branch
		my $generations = $branch_length * $branch_unit;
		$total_branch_length += $generations;
		#$generations = ($generations + 1);
		if($verbose) { print "Generations on branch: " . sprintf("%.3f", $generations) . "\n" }
		
		# Tally all trinucleotides in sequence; first and last nucleotides ignored.
		my %trint_counts;
		my $trint_counts_sum = 0;
		for (my $seq_index = 0; ($seq_index + 2) < length($curr_sequence); $seq_index++) {
			$trint_counts{substr($curr_sequence, $seq_index, 3)}++;
			$trint_counts_sum++;
		}
		
		print "trinucleotide counts, summing to $trint_counts_sum\:\n";
		foreach (sort keys %trint_counts) {
			print "$_\=" . $trint_counts{$_} . "\n";
		}
		
		# Calculate weighted mean mutation rate per generation.
		my $mut_rate_overall = 0;
		foreach (keys %trint_counts) {
			my $rate_row_sum = $rate_matrix{$_}->{'A'} + $rate_matrix{$_}->{'C'} + 
									$rate_matrix{$_}->{'G'} + $rate_matrix{$_}->{'T'};
			
			$mut_rate_overall += ($trint_counts{$_} * $rate_row_sum);
		}
		
	#		$final_mutation_rate = $mut_rate_overall;
	#		my $mut_rate_mean = $mut_rate_overall / $trint_counts_sum;
		
		if($verbose) { print "starting mutation rate: $mut_rate_overall\n" }
	#		print "mut_rate_mean=$mut_rate_mean\n";
		# when all rates were 1e-7 (file SLiM_example_rate2.txt), this was 
		#mut_rate_overall=0.0299994
		#mut_rate_mean=3e-07. Is that what we expect?
		# each row sums to 3e-7.
		# expect (3e-7) * 100000 * 4399 = 131.97 mutations per run.
		# expect (3e-7) * 99998 = 0.0299994 mutations per generation.
		# CONFIRMED ALL AROUND.
		
		# Generate random exponential waiting time to next mutation
		my $rand_number = rand();
		my $waiting_time = -(1 / $mut_rate_overall) * log($rand_number);
#		print "waiting_time=$waiting_time\n";
		
		while ($waiting_time < $generations) { # a new mutation!
			$num_mutations++;
			
			# which site and nucleotide change?
			my $rand_number2 = rand($mut_rate_overall);
			
			my $curr_rate_max = 0;
			my $mutation_complete = 0;
			
			my $mutation_site_index;
			my $trint_AA = '';
			my $trint_DA = '';
			my $prev_trint_AA = '';
			my $prev_trint_DA = '';
			my $next_trint_AA = '';
			my $next_trint_DA = '';
			my $nt_AA = '';
			my $nt_DA = '';
			
			DETERMINE_MUTATION: for (my $seq_index = 0; ($seq_index + 2) < length($curr_sequence); $seq_index++) {
				my $trint = substr($curr_sequence, $seq_index, 3);
				
				foreach my $nt (qw/A C G T/) {
					#print "nt=$nt\n";
					$curr_rate_max += $rate_matrix{$trint}->{$nt};
					
					if ($rand_number2 < $curr_rate_max) { # this one was it!
						
						$mutation_site_index = $seq_index + 1;
						
						print "MUTATION at generation " . ($generations_elapsed + $waiting_time) . "! $trint" . ($mutation_site_index + 1);
						
						# Prev and next overlapping trinucleotides
						
						# don't look at prev trint for FIRST trint
						unless($seq_index == 0) {
							$prev_trint_AA = substr($curr_sequence, $seq_index - 1, 3);
							$prev_trint_DA = $prev_trint_AA;
							substr($prev_trint_DA, 2, 1, $nt);
						}
						
						# don't look at next trint for LAST trint
						unless(($seq_index + 3) >= length($curr_sequence)) {
							$next_trint_AA = substr($curr_sequence, $seq_index + 1, 3);
							$next_trint_DA = $next_trint_AA;
							substr($next_trint_DA, 0, 1, $nt);
						}
						
						$trint_AA = $trint;
						$nt_AA = substr($trint, 1, 1, $nt); # returns what was there before replacement
						
						print "$trint";
						$trint_DA = $trint;
						$nt_DA = $nt;
						
						# change state of actual sequence
						substr($curr_sequence, $mutation_site_index, 1, $nt);
						
						$mutation_complete = 1;
						last DETERMINE_MUTATION;
					}
				}
			}
			
			# For that EXTREMELY RARE case where it's the last site, last nucleotide (T)
			#my $trint = substr($curr_sequence, length($curr_sequence) - 3, 3);
			#print "VERY LAST TRINT!! $trint\n";
			unless($mutation_complete == 1) { # very last site, nucleotide T
				my $trint = substr($curr_sequence, length($curr_sequence) - 3, 3);
				
				$mutation_site_index = (length($curr_sequence) - 2);
				
				print "MUTATION at generation " . ($generations_elapsed + $waiting_time) . "! $trint" . ($mutation_site_index + 1);
				
				# Prev and next overlapping trinucleotides
				
				# don't look at prev trint for FIRST trint
				unless(length($curr_sequence) == 3) {
					$prev_trint_AA = substr($curr_sequence, (length($curr_sequence) - 4), 3);
					$prev_trint_DA = $prev_trint_AA;
					substr($prev_trint_DA, 2, 1, 'T');
				}
				
				$trint_AA = $trint;
				$nt_AA = substr($trint, 1, 1, 'T'); # returns what was there before replacement
				
				#substr($trint, 1, 1, 'T'); # redundant
				print "$trint";
				$trint_DA = $trint;
				$nt_DA = 'T';
				
				# NO NEXT TRINUCLEOTIDE!
				
				# change state of actual sequence
				substr($curr_sequence, $mutation_site_index, 1, 'T'); # DOUBLE CHECK THAT
				$mutation_complete = 1;
			}
			
			# UPDATE the number of generations REMAINING on the branch
			$generations = $generations - $waiting_time;
			$generations_elapsed += $waiting_time;
			
			# UPDATE mutation history
			#$mutation_history{$mutation_site_index + 1} .= int($generations_elapsed + 1) . "\-$trint_AA\-$trint_DA\,";
			$mutation_history{($mutation_site_index + 1)} .= int($generations_elapsed + 1) . "\-$nt_AA\>$nt_DA\,";
			
			# UPDATE number of trinucleotides in sequence, taking advantage of 1 mutation 
			# at a time. One nucleotide change will affect 3 overlapping trinucleotides.
			# Sum (number of trints, 2 less the number of sites) will remain the same. 
			# Also update the overall mutation rate.
			
			# SUBTRACT obliterated (ancestral) trinucleotide values
			if($prev_trint_AA ne '') {
				$trint_counts{$prev_trint_AA}--;
				my $rate_row_sum_prev_trint_AA = $rate_matrix{$prev_trint_AA}->{'A'} + $rate_matrix{$prev_trint_AA}->{'C'} + 
											$rate_matrix{$prev_trint_AA}->{'G'} + $rate_matrix{$prev_trint_AA}->{'T'};
				$mut_rate_overall -= $rate_row_sum_prev_trint_AA;
			}
			
			$trint_counts{$trint_AA}--;
			my $rate_row_sum_AA = $rate_matrix{$trint_AA}->{'A'} + $rate_matrix{$trint_AA}->{'C'} + 
										$rate_matrix{$trint_AA}->{'G'} + $rate_matrix{$trint_AA}->{'T'};
			$mut_rate_overall -= $rate_row_sum_AA;
			
			if($next_trint_AA ne '') {
			#if ($mutation_site_index < (length($curr_sequence) - 2)) { # if not LAST trinucleotide
				$trint_counts{$next_trint_AA}--;
				my $rate_row_sum_next_trint_AA = $rate_matrix{$next_trint_AA}->{'A'} + $rate_matrix{$next_trint_AA}->{'C'} + 
											$rate_matrix{$next_trint_AA}->{'G'} + $rate_matrix{$next_trint_AA}->{'T'};
				$mut_rate_overall -= $rate_row_sum_next_trint_AA;
			}
			
			# ADD spontaneously generated (derived) trinucleotide values
			if($prev_trint_DA ne '') {
				$trint_counts{$prev_trint_DA}++;
				my $rate_row_sum_prev_trint_DA = $rate_matrix{$prev_trint_DA}->{'A'} + $rate_matrix{$prev_trint_DA}->{'C'} + 
											$rate_matrix{$prev_trint_DA}->{'G'} + $rate_matrix{$prev_trint_DA}->{'T'};
				$mut_rate_overall += $rate_row_sum_prev_trint_DA;
			}
			
			$trint_counts{$trint_DA}++;
			my $rate_row_sum_DA = $rate_matrix{$trint_DA}->{'A'} + $rate_matrix{$trint_DA}->{'C'} + 
										$rate_matrix{$trint_DA}->{'G'} + $rate_matrix{$trint_DA}->{'T'};
			$mut_rate_overall += $rate_row_sum_DA; # for example, if CpG created, may be higher
			
			if($next_trint_DA ne '') {
			#if ($mutation_site_index < (length($curr_sequence) - 2)) { # if not LAST trinucleotide
				$trint_counts{$next_trint_DA}++;
				my $rate_row_sum_next_trint_DA = $rate_matrix{$next_trint_DA}->{'A'} + $rate_matrix{$next_trint_DA}->{'C'} + 
											$rate_matrix{$next_trint_DA}->{'G'} + $rate_matrix{$next_trint_DA}->{'T'};
				$mut_rate_overall += $rate_row_sum_next_trint_DA;
			}
			
			print "; new mutation rate: $mut_rate_overall\n";
			
#			if ($track_rate || $tracked_motif) { 
#				$generational_histories{$generations_elapsed}->{nodes} .= "$node_id\,";
#			}
			if ($track_rate) { 
				$generational_histories{$nodes}->{$generations_elapsed}->{rate} = $mut_rate_overall;
			}
			if ($tracked_motif) { # COMEBACK that regex work?
				my @motifs_overlapping = ($curr_sequence =~ /(?=$tracked_motif)/g); # ?= means overlapping matches
				$generational_histories{$nodes}->{$generations_elapsed}->{$tracked_motif} = scalar(@motifs_overlapping);
			}
			
			# New waiting time
			$rand_number = rand();
			$waiting_time = -(1 / $mut_rate_overall) * log($rand_number);
			#print "waiting_time=$waiting_time\n";
		} # finish a new mutation
		
		# Add the remaining time in which mutation DIDN'T occur.
		$generations_elapsed += $generations;
		
		if($branch_to_tip_length == 0) {
			$branch_to_tip_length = $generations_elapsed;
		} elsif (int($branch_to_tip_length) != int($generations_elapsed)) {
			die "\n### WARNING: conflicting branch-to-tip length measures for taxon $taxon\: $branch_to_tip_length vs. $generations_elapsed\. TERMINATED.\n\n";
		}
		
		if($verbose) { print "evolution of terminal taxon complete; generations_elapsed: " . sprintf("%.3f", $generations_elapsed) . "\n" }
#		print "tree: $tree\n";
		
		# STORE TAXON HISTORY
#		print "mutation_history:\n";
		foreach my $mutated_site (sort {$a <=> $b} keys %mutation_history) {
			my $this_mutation_history = $mutation_history{$mutated_site};
			chop($this_mutation_history); # get ride of last comma (,)
			$taxa_histories{$taxon}->{$mutated_site} = $this_mutation_history;
#			print "$mutated_site: $this_mutation_history\n";
		}
	} # END BASE CASE: a terminal taxon
	
} # END SUBROUTINE

exit;




